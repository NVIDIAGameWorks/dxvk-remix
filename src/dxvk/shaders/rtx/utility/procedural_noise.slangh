/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "procedural_noise.h"

// Adaptation of iq's/stubbe's value noise LUT trick for 4-dimensions: https://www.shadertoy.com/view/XltSWj

float4 valueNoiseLutSample(float2 uv)
{
  return ValueNoiseSampler.SampleLevel((uv + 0.5) / VALUE_NOISE_RESOLUTION, 0) * 2..xxxx - 1..xxxx;
}

float valueNoise4D(float4 x)
{
  float4 p = floor(x);
  float4 f = float4(smoothstep(0.f, 1.f, fract(x.xyz)), fract(x.w));
  float2 uv = (p.xy - p.z * float2(VALUE_NOISE_Z_OFFSET_X, VALUE_NOISE_Z_OFFSET_Y) - p.w * float2(VALUE_NOISE_W_OFFSET_X, VALUE_NOISE_W_OFFSET_Y)) + f.xy;
    
  float4 s = valueNoiseLutSample(uv);
  return lerp(lerp(s.x, s.y, f.z), lerp(s.z, s.w, f.z), f.w);
}

static const float4x4 m = float4x4(0.00,  0.80,  0.60, -0.0,
                                  -0.80,  0.36, -0.48, -0.0,
                                  -0.60, -0.48,  0.64,  0.0,
                                   0.40,  0.30,  0.20,  0.1);

float fractalBrownianValueNoise4D(float3 pos, float time, uint numOctaves)
{
  float4 samplePos = float4(pos, time);
  float f = 0.0;

  float4 q = samplePos;
  float a = 0.5f;
  for (int i = 0; i < numOctaves; i++)
  {
    q = mul(m, q);
    f += (a * valueNoise4D(q));
    q *= 2;
    a *= 0.5f;
  }
  return f;
}

// Curl noise reference: https://petewerner.blogspot.com/2015/02/intro-to-curl-noise.html?m=1

float3 curlOfValueNoise(float3 pos, float time = 0.f)	
{
  const float eps = 0.5f; // roughly half a pixel
  
  float3 p, n;
  p.x = valueNoise4D(float4(pos + float3(eps, 0, 0), time));
  n.x = valueNoise4D(float4(pos - float3(eps, 0, 0), time));
  p.y = valueNoise4D(float4(pos + float3(0, eps, 0), time));
  n.y = valueNoise4D(float4(pos - float3(0, eps, 0), time));
  p.z = valueNoise4D(float4(pos + float3(0, 0, eps), time));
  n.z = valueNoise4D(float4(pos - float3(0, 0, eps), time)); 
  
  float3 gradient = (p - n)/(2 * eps);
  return (gradient.zxy - gradient.yzx);
}
