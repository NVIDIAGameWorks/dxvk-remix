/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Reads from a texture with respect to specified spritesheet information for Ray Portals specifically. This differs from
// the usual spritesheet adjustment in the Surface as this function incorporates rotation and blends between 2 frames of the
// spritesheet smoothly over time and is thus more expensive. Do note that the gamma correction flag passed to this function
// should be set if the texture being sampled from is encoded in gamma space.
bool rayPortalSurfaceMaterialInteractionSpriteSheetReadHelper(
  uint16_t textureIndex,
  uint16_t samplerIndex,
  bool textureGammaCorrect,
  SurfaceInteraction surfaceInteraction,
  uint32_t timeSinceStartMS,
  uint8_t spriteSheetRows,
  uint8_t spriteSheetCols,
  uint8_t spriteSheetFPS,
  float16_t rotationSpeed,
  inout f16vec4 textureSample)
{
  // Return if no texture is available
  if (textureIndex == BINDING_INDEX_INVALID)
  {
    return false;
  }

  // Note: No early out for spriteSheetFPS == 0 case because Ray Portals will commonly use animated textures.

  const float timeSinceStartSecs = timeSinceStartMS * 0.001f;

  // Some constant to slow down, and a unique direction for opposing Portals
  const float t = float(rotationSpeed) * timeSinceStartSecs;
  const float2x2 rot = float2x2(cos(t), -sin(t), sin(t), cos(t));

  vec2 originalCoord = surfaceInteraction.textureCoordinates;

  // Rotate around the center
  originalCoord = mul(rot, originalCoord - float2(0.5f)) + float2(0.5f);

  // Make sure we don't sample from neighbouring sprite sheet cells
  originalCoord = saturate(originalCoord);

  const uint numSprites = (spriteSheetCols * spriteSheetRows);
  const float frameWithFraction = (timeSinceStartSecs * spriteSheetFPS) % numSprites;
  uint frame = floor(frameWithFraction);
  const float frameFraction = frac(frameWithFraction);
  const vec2 uvSize = vec2(1.0f / spriteSheetCols, 1.0f / spriteSheetRows);

  // Scale the gradients according to the spritesheet size
  surfaceInteraction.textureGradientX *= uvSize;
  surfaceInteraction.textureGradientY *= uvSize;

  // get prev frame sample
  vec2 uvBias = vec2(frame % spriteSheetCols, frame / spriteSheetCols) * uvSize;
  surfaceInteraction.textureCoordinates = uvBias + originalCoord * uvSize;
  const f16vec4 prevSample = textureRead(textureIndex, samplerIndex, surfaceInteraction);

  // get next frame sample
  frame = (frame + 1) % numSprites;
  uvBias = vec2(frame % spriteSheetCols, frame / spriteSheetCols) * uvSize;
  surfaceInteraction.textureCoordinates = uvBias + originalCoord * uvSize;
  const f16vec4 futureSample = textureRead(textureIndex, samplerIndex, surfaceInteraction);

  // Gamma correct the color component of the samples if requested
  const f16vec4 correctedPrevSample = textureGammaCorrect ?
    vec4(gammaToLinear(prevSample.rgb), prevSample.a) :
    prevSample;
  const f16vec4 correctedFutureSample = textureGammaCorrect ?
    vec4(gammaToLinear(futureSample.rgb), futureSample.a) :
    futureSample;

  // combine them
  textureSample = mix(correctedPrevSample, correctedFutureSample, frameFraction);

  return true;
}

// Ray Portal Surface Material Interaction Functions

RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteractionCreate(
  RayPortalSurfaceMaterial rayPortalSurfaceMaterial,
  Surface surface,
  SurfaceInteraction surfaceInteraction)
{
  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction;

  // Sample from each Ray Portal Surface Material texture

  f16vec4 maskSample;
  f16vec4 maskSample2;

  const bool maskLoaded = rayPortalSurfaceMaterialInteractionSpriteSheetReadHelper(
    rayPortalSurfaceMaterial.maskTextureIndex,
    rayPortalSurfaceMaterial.samplerIndex,
    true,
    surfaceInteraction,
    cb.timeSinceStartMS,
    surface.spriteSheetRows,
    surface.spriteSheetCols,
    surface.spriteSheetFPS,
    rayPortalSurfaceMaterial.rotationSpeed,
    maskSample);
  // Note: Only load the second mask if the texture coordinates are in a valid range (they often go out of this range
  // when opening a Portal). To be sure the texture is not being loaded it would be good to short circut the evaluation of the texture read helper,
  // but this complicates the determination of the default mask color a bit (without moving the invalid texture check out at least), so we instead just
  // hope the optimizer will remove the texture load when any code referencing it is behind a conditional.
  const bool shouldUseMask2Texture = all(surfaceInteraction.textureCoordinates >= f16vec2(0.0f)) && all(surfaceInteraction.textureCoordinates <= f16vec2(1.0f));
  const bool maskLoaded2 = surfaceMaterialInteractionTextureReadHelper(rayPortalSurfaceMaterial.maskTextureIndex2, rayPortalSurfaceMaterial.samplerIndex2, surfaceInteraction, maskSample2);

  // Load Color

  f16vec4 mask = f16vec4(1.0f, 1.0f, 1.0f, 0.0f);

  if (maskLoaded)
  {
    mask = maskSample;
    mask.rgb *= uint16BitsToHalf(cb.emissiveIntensity) * rayPortalSurfaceMaterial.emissiveIntensity;
  }

  // Note: Mask sample color (not alpha) is gamma corrected implicitly by the spritesheet read helper, no need
  // to gamma correct here.

  // Load Portal mask

  float16_t mask2 = maskLoaded2 ? 0.0h : 1.0h;

  if (shouldUseMask2Texture && maskLoaded2)
  {
    mask2 = maskSample2.r;
  }
  else
  {
    // Approximation for the Portal mask texture
    float2 texcoord = surfaceInteraction.textureCoordinates * 2.f - 1.f;
    mask2 = float16_t(1.f - saturate(0.6f * dot(texcoord, texcoord)));
  }

  // Note: Portal mask is linear data and has no need to be gamma corrected.

  // Transform to desired Ray Portal Material Interaction values

  rayPortalSurfaceMaterialInteraction.mask = mask;
  rayPortalSurfaceMaterialInteraction.rayPortalIndex = rayPortalSurfaceMaterial.rayPortalIndex;
  rayPortalSurfaceMaterialInteraction.isInsidePortal = mask2 > 0.5h ? 1 : 0;

  return rayPortalSurfaceMaterialInteraction;
}

RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteractionCreate(PolymorphicSurfaceMaterialInteraction polymorphicSurfaceMaterialInteraction)
{
  // Decode the Ray Portal Surface Material Interaction from its polymorphic representation
  // Note: Ray Portal type is known in advance

  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction;

  rayPortalSurfaceMaterialInteraction.mask.xyz = polymorphicSurfaceMaterialInteraction.vdata0;
  rayPortalSurfaceMaterialInteraction.mask.w = polymorphicSurfaceMaterialInteraction.fdata0;
  rayPortalSurfaceMaterialInteraction.rayPortalIndex = polymorphicSurfaceMaterialInteraction.idata0 & 0xf;
  rayPortalSurfaceMaterialInteraction.isInsidePortal = polymorphicSurfaceMaterialInteraction.idata0 >> 8;

  return rayPortalSurfaceMaterialInteraction;
}

RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteractionCreate(
  GBufferMemoryPolymorphicSurfaceMaterialInteraction gBufferMemoryPolymorphicSurfaceMaterialInteraction)
{
  // Decode the Ray Portal Surface Material Interaction from its polymorphic GBuffer Memory representation
  // Note: Ray Portal type is known in advance

  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction;

  const uint data0 = gBufferMemoryPolymorphicSurfaceMaterialInteraction.data0;
  const uint data1 = gBufferMemoryPolymorphicSurfaceMaterialInteraction.data1;

  const f16vec4 mask = f16vec4(
    unorm8ToF16(uint8_t(data1 >> 0)),
    unorm8ToF16(uint8_t(data1 >> 8)),
    unorm8ToF16(uint8_t(data1 >> 16)),
    unorm8ToF16(uint8_t(data1 >> 24)));
  const uint8_t rayPortalIndex = uint8_t(data0 >> 0);
  const uint8_t isInsidePortal = uint8_t(data0 >> 8);
  
  rayPortalSurfaceMaterialInteraction.mask = mask;
  rayPortalSurfaceMaterialInteraction.isInsidePortal = isInsidePortal;
  rayPortalSurfaceMaterialInteraction.rayPortalIndex = rayPortalIndex;

  return rayPortalSurfaceMaterialInteraction;
}
void rayPortalSurfaceMaterialInteractionCalcSample(
  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction,
  MinimalRayInteraction minimalRayInteraction,
  inout SurfaceMaterialInteractionSample surfaceMaterialInteractionSample,
  inout SurfaceMaterialInteractionLobeSample surfaceMaterialInteractionLobeSample,
  inout bool insideMedium, inout bool penetrateSurface)
{
  unused(insideMedium);
  unused(penetrateSurface);
  
  surfaceMaterialInteractionLobeSample.lobe = uint8_t(0u);
  surfaceMaterialInteractionLobeSample.pdf = float16_t(1.0f);

  surfaceMaterialInteractionSample.inputDirection = f16vec3(0.0, 0.0, 0.0);
  surfaceMaterialInteractionSample.throughput = f16vec3(0.0, 0.0, 0.0);
  surfaceMaterialInteractionSample.solidAnglePdf = 0.0f;
}

SurfaceMaterialInteractionPSRSample rayPortalSurfaceMaterialInteractionCalcPSRReflectionSample(
  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction,
  MinimalRayInteraction minimalRayInteraction)
{
  SurfaceMaterialInteractionPSRSample materialPSRSample;

  materialPSRSample.performPSR = false;

  return materialPSRSample;
}

SurfaceMaterialInteractionPSRSample rayPortalSurfaceMaterialInteractionCalcPSRTransmissionSample(
  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction,
  MinimalRayInteraction minimalRayInteraction,
  inout bool insideMedium, inout bool penetrateSurface)
{  
  unused(insideMedium);
  unused(penetrateSurface);
  
  SurfaceMaterialInteractionPSRSample materialPSRSample;

  materialPSRSample.performPSR = false;

  return materialPSRSample;
}

void rayPortalSurfaceMaterialInteractionCalcPSRSample(
  RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction,
  MinimalRayInteraction minimalRayInteraction,
  inout SurfaceMaterialInteractionPSRSample surfaceMaterialInteractionReflectionPSRSample,
  inout SurfaceMaterialInteractionPSRSample surfaceMaterialInteractionTransmissionPSRSample,
  inout f16vec3 diffuseLayerWeight,
  inout bool reflectionSelectedIntegrationSurface,
  inout float16_t selectedIntegrationSurfacePdf,
  inout bool insideMedium, inout bool penetrateSurface)
{
  unused(diffuseLayerWeight);
  
  // Sample Reflection PSR

  surfaceMaterialInteractionReflectionPSRSample = rayPortalSurfaceMaterialInteractionCalcPSRReflectionSample(
    rayPortalSurfaceMaterialInteraction, minimalRayInteraction);

  // Sample Transmission PSR

  surfaceMaterialInteractionTransmissionPSRSample = rayPortalSurfaceMaterialInteractionCalcPSRTransmissionSample(
    rayPortalSurfaceMaterialInteraction, minimalRayInteraction, insideMedium, penetrateSurface);

  // Determine which PSR surface should be selected for integration and the probability of this choice

  // Note: No PSR is used by the ray portal material.
  reflectionSelectedIntegrationSurface = false;
  selectedIntegrationSurfacePdf = 1.0f;
}
