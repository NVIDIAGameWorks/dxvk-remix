/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Rect Light Helper Functions

// Note: Light vector information outputted to allow for no duplicate math for visibility weighting.
float rectLightCalcPositionalWeight(RectLight rectLight, vec3 position, inout vec3 lightVector, inout float16_t maxRectRadius)
{
  // Find a point on the light that is closest to `position`:
  
  // Position of the surface relative to light center
  const float3 relativePosition = position - rectLight.position;

  // Projection of the surface position onto the light plane
  const float3 projectedPoint = relativePosition - rectLight.normal * dot(relativePosition, rectLight.normal);

  // Coordinates of that projection in the light's XY basis
  float2 planePosition = float2(dot(projectedPoint, rectLight.xAxis), dot(projectedPoint, rectLight.yAxis));

  // Clamp the coordinates to the extents of the light
  const float2 halfDimensions = rectLight.dimensions * 0.5;
  planePosition = clamp(planePosition, -halfDimensions, halfDimensions);

  // Convert from the light's XY basis back into 3D space
  const float3 closestPointOnLight = rectLight.position
    + rectLight.xAxis * planePosition.x
    + rectLight.yAxis * planePosition.y;

  lightVector = closestPointOnLight - position;
  maxRectRadius = float16_t(0.5f) * max(rectLight.dimensions.x, rectLight.dimensions.y);

  const float lightDistance2 = squareLength(lightVector);

  // Note: Treat the light as a point light and get the incoming luminance to the viewer
  return safePositiveDivide(
    calcBt709Luminance(rectLightCalcPower(rectLight) / (4.0f * pi)),
    lightDistance2,
    lightWeightEpsilon
  );
}

bool rectLightCalcVisibilityWeight(RectLight rectLight, f16vec3 triangleNormal, vec3 lightVector, float16_t maxRectRadius, const bool isThinOpaqueSubsurface)
{
  // Cull the rects that are completely hidden below the surface or the surface has subsurface material,
  // and the rects that are oriented away from the surface.
  const bool frontSideRect = (isThinOpaqueSubsurface || dot(lightVector, vec3(triangleNormal)) > float(-maxRectRadius)) &&
                             (dot(lightVector, vec3(rectLight.normal)) < 0.0f);

  return frontSideRect;
}

// Rect Light Functions

RectLight rectLightCreate(DecodedPolymorphicLight decodedPolymorphicLight)
{
  // Decode the Rect Light from the packed memory representation
  // Note: Light type is known in advance

  RectLight rectLight;

  const uint32_t data00 = decodedPolymorphicLight.data0.x;
  const uint32_t data01 = decodedPolymorphicLight.data0.y;
  const uint32_t data02 = decodedPolymorphicLight.data0.z;
  const u16vec2 data03 = unpack16(decodedPolymorphicLight.data0.w);
  const u16vec2 data20 = unpack16(decodedPolymorphicLight.data2.x);
  const u16vec2 data21 = unpack16(decodedPolymorphicLight.data2.y);
  const u16vec2 data22 = unpack16(decodedPolymorphicLight.data2.z);
  const u16vec2 data23 = unpack16(decodedPolymorphicLight.data2.w);
  const u16vec2 data30 = unpack16(decodedPolymorphicLight.data3.x);

  rectLight.position = vec3(uintBitsToFloat(data00), uintBitsToFloat(data01), uintBitsToFloat(data02));
  rectLight.dimensions = uint16BitsToHalf(data03);
  rectLight.xAxis = f16vec3(uint16BitsToHalf(data20.x), uint16BitsToHalf(data20.y), uint16BitsToHalf(data21.x));
  rectLight.yAxis = f16vec3(uint16BitsToHalf(data21.y), uint16BitsToHalf(data22.x), uint16BitsToHalf(data22.y));
  rectLight.normal = f16vec3(uint16BitsToHalf(data23.x), uint16BitsToHalf(data23.y), uint16BitsToHalf(data30.x));
  rectLight.radiance = decodedPolymorphicLight.radiance;
  rectLight.shaping = decodedPolymorphicLight.shaping;

  return rectLight;
}

float rectLightCalcSurfaceArea(RectLight rectLight)
{
  return rectLight.dimensions.x * rectLight.dimensions.y;
}

// Note: This does not take shaping into account.
vec3 rectLightCalcPower(RectLight rectLight)
{
  // Integrate over the cosine-weighted hemisphere of directions at each point and the rectangle's area

  return rectLightCalcSurfaceArea(rectLight) * pi * rectLight.radiance;
}

float rectLightCalcWeight(RectLight rectLight, MinimalSurfaceInteraction viewSurfaceInteraction, const bool isThinOpaqueSubsurface)
{
  vec3 lightVector;
  float16_t maxRectRadius;
  const float positionalWeight = rectLightCalcPositionalWeight(rectLight, viewSurfaceInteraction.position, lightVector, maxRectRadius);
  const bool visibilityWeight = rectLightCalcVisibilityWeight(rectLight, viewSurfaceInteraction.triangleNormal, lightVector, maxRectRadius, isThinOpaqueSubsurface);

  // Note: Ideally this if statement is re-ordered to avoid the calculation of the positional weight when the visibility test fails now that the logic has been abstracted
  // into functions.
  if (visibilityWeight) {
    return positionalWeight;
  } else {
    return 0.0f;
  }
}

float rectLightCalcWeight(RectLight rectLight, VolumeInteraction viewVolumeInteraction)
{
  vec3 lightVector;
  float16_t maxRectRadius;
  const float positionalWeight = rectLightCalcPositionalWeight(rectLight, viewVolumeInteraction.position, lightVector, maxRectRadius);

  return positionalWeight;
}

float16_t rectLightCalcShaping(RectLight rectLight, f16vec3 lightToViewDirection)
{
  return lightShapingCalcPlanarFalloff(
    rectLight.shaping, rectLight.xAxis, rectLight.yAxis, rectLight.dimensions.x / rectLight.dimensions.y,
    lightToViewDirection);
}

LightSample rectLightSampleArea(RectLight rectLight, f16vec2 sampleCoordinates, vec3 position)
{
  // Subdivide the rectangle into two triangles and randomly select one.
  // Generally, the areas of the two spherical triangles are not equal, and ideally one should
  // compute the areas and select the triangle with pdf proportional to the area.
  // But computing the area of a spherical triangle is relatively expensive.
  const bool selectedTriangle = sampleCoordinates.x < 0.5;
  sampleCoordinates.x = frac(sampleCoordinates.x * 2.0);

  // Construct the selected triangle
  const float3 surfaceToLightCenter = rectLight.position - position;
  const vec3 halfX = rectLight.xAxis * rectLight.dimensions.x * 0.5;
  const vec3 halfY = rectLight.yAxis * rectLight.dimensions.y * 0.5;
  float3 A = surfaceToLightCenter + halfX + halfY;
  float3 B = surfaceToLightCenter - halfX - halfY;
  float3 C = surfaceToLightCenter + (halfX - halfY) * (selectedTriangle ? 1.0 : -1.0);

  // Project the triangle onto the unit sphere at the surface
  A = safeNormalize(A, vec3(0.0f));
  B = safeNormalize(B, vec3(0.0f));
  C = safeNormalize(C, vec3(0.0f));

  // Sample the spherical triangle
  // Note: This essentially samples the solid angle formed by the rect light's triangle as the previous normalizations
  // project it into the form of a spherical triangle which can be sampled from uniformly.
  float solidAnglePdf;
  const float3 surfaceToSampleDirection = calcSphericalTriangleSample(A, B, C, sampleCoordinates, solidAnglePdf);

  // Compensate the PDF for the selection of one triangle out of two.
  // By selecting one triangle, we're subdividing the integration domain into two
  // disjoint subdomains and sampling each subdomain separately, normalizing each sub-pdf.
  // Since we're not selecting the triangle with pdf proportional to the triangle area,
  // the overall pdf becomes skewed with more samples allocated towards the smaller triangle
  // than necessary, but the result is unbiased.
  // (The unbiased property has been verified by modifying the triangle selection pdf
  // and comparing accumulated images: the pdf can be anything as long as it's not zero)
  solidAnglePdf *= 0.5;

  // Intersect the sampled direction ray with the light plane
  const float t = dot(surfaceToLightCenter, rectLight.normal) / dot(surfaceToSampleDirection, rectLight.normal);
  const float3 rectanglePositionSample = position + surfaceToSampleDirection * t;

  // Make sure that the generated sample is actually inside the light rectangle.
  // In rare cases, spherical triangle sampling can generate invalid directions that result in light streaks,
  // so we detect and ignore these situations.
  const float3 lightCenterToSample = rectanglePositionSample - rectLight.position;
  float2 uv;
  uv.x = dot(lightCenterToSample, rectLight.xAxis);
  uv.y = dot(lightCenterToSample, rectLight.yAxis);
  const bool outOfRange = any(abs(uv) > rectLight.dimensions * 0.5);

  const f16vec3 lightToViewDirection = -surfaceToSampleDirection;
  const float16_t sampleCosTheta = dot(lightToViewDirection, rectLight.normal);

  // Compute light shaping
  const float16_t lightShaping = rectLightCalcShaping(rectLight, lightToViewDirection);

  // Create the light sample

  LightSample lightSample;

  lightSample.position = rectanglePositionSample;
  lightSample.normal = rectLight.normal;

  if (sampleCosTheta <= float16_t(0.0f) || outOfRange)
  {
      lightSample.radiance = vec3(0.0f, 0.0f, 0.0f);
      lightSample.solidAnglePdf = 0.0f;
  }
  else
  {
      lightSample.radiance = rectLight.radiance * lightShaping;
      lightSample.solidAnglePdf = solidAnglePdf;
  }

  return lightSample;
}

LightSample rectLightSampleArea(
  RectLight rectLight, f16vec2 sampleCoordinates,
  MinimalSurfaceInteraction viewSurfaceInteraction)
{
  return rectLightSampleArea(
    rectLight, sampleCoordinates,
    viewSurfaceInteraction.position);
}

LightSample rectLightSampleArea(
  RectLight rectLight, f16vec2 sampleCoordinates,
  VolumeInteraction viewVolumeInteraction)
{
  return rectLightSampleArea(
    rectLight, sampleCoordinates,
    viewVolumeInteraction.position);
}
