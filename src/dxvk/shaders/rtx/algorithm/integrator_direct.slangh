/*
* Copyright (c) 2022-2025, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/algorithm/path_state.slangh"
#include "rtx/utility/noise.slangh"
#include "rtx/utility/color.slangh"
#include "rtx/utility/packing.slangh"
#include "rtx/utility/debug_view_helpers.slangh"
#include "rtx/utility/gbuffer_helpers.slangh"
#include "rtx/concept/ray/ray.slangh"
#include "rtx/pass/instance_definitions.slangh"
#include "rtx/concept/surface/surface.slangh"
#include "rtx/concept/surface_material/surface_material.slangh"
#include "rtx/concept/light/light.slangh"
#include "rtx/algorithm/lighting.slangh"
#include "rtx/algorithm/resolve.slangh"
#include "rtx/algorithm/visibility.slangh"
#include "rtx/algorithm/rtxcr/rtxcr_material.slangh"
#include "integrator.slangh"
#include "rtx/pass/nrc/nrc_integrator_utilities.slangh"

void evalNEEPrimary(
  vec3 throughput,
  ivec2 pixelCoordinate,
  inout vec3 diffuseLobeRadiance,
  inout vec3 specularLobeRadiance,
  out float hitDistance, 
  out bool hasOpaqueHit,
  out float illuminance,
  bool isValidLightSample,
  LightSample lightSample,
  float invSelectionPdf, 
  uint8_t sampledTransportPortalIndex, 
  GeometryFlags geometryFlags, 
  Ray viewRay,
  MinimalRayInteraction minimalRayInteraction,
  MinimalSurfaceInteraction minimalSurfaceInteraction,
  OpaqueSurfaceMaterialInteraction opaqueSurfaceMaterialInteraction,
  inout RNG randomState)
{
  // Setup and trace the visibility ray

  uint8_t rayMask = OBJECT_MASK_OPAQUE | (geometryFlags.objectMask & OBJECT_MASK_ALL_DYNAMIC);
  rayMask |= (cb.enableDirectTranslucentShadows) ? OBJECT_MASK_TRANSLUCENT : 0;
  rayMask |= (cb.enableDirectAlphaBlendShadows) ? OBJECT_MASK_ALPHA_BLEND : 0;

  const bool isThinOpaqueSubsurface = isThinOpaqueSubsurfaceMaterial(opaqueSurfaceMaterialInteraction);
  const bool isDiffusionProfileSss = (cb.sssArgs.enableDiffusionProfile && isSubsurfaceDiffusionProfileMaterial(opaqueSurfaceMaterialInteraction));

  // We can encounter a POM surface during resolving (as it's a shared function) but if direct lighting for POM
  //  is disabled, we must also handle that user choice gracefully.
  const bool pomOpaqueSurfaceEncountered = geometryFlags.pomOpaqueSurfaceEncountered && cb.pomEnableDirectLighting;

  const uint16_t primarySurfaceIndex = (pomOpaqueSurfaceEncountered || isDiffusionProfileSss) ? uint16_t(SharedSurfaceIndex[pixelCoordinate]) : BINDING_INDEX_INVALID;

  VisibilityResult occludedVisibility;
  occludedVisibility.hasOpaqueHit = true;

  VisibilityResult visibility = isValidLightSample ?
    traceVisibilityRay<visibilityModeEnablePom | visibilityModeAccurateHitDistance | visibilityModeEnableTranslucentMaterials | visibilityModeEnableSubsurfaceMaterials>(
      minimalSurfaceInteraction,
      lightSample.position, rayMask,
      sampledTransportPortalIndex, geometryFlags.portalSpace, pomOpaqueSurfaceEncountered,
      minimalRayInteraction.coneRadius, viewRay.spreadAngle, 1.0, geometryFlags.isViewModel, false,
      primarySurfaceIndex, SharedTextureCoord[pixelCoordinate],
      isThinOpaqueSubsurface,
      opaqueSurfaceMaterialInteraction.shadingNormal) :
    occludedVisibility;

  const bool hasNonSssOpaqueHit = visibility.hasOpaqueHit;

  SssDiffusionProfileResult sssDiffusionProfileResult = createEmptySssDiffusionProfileResult();
  if (isDiffusionProfileSss)
  {
    sssDiffusionProfileResult = evalSssDiffusionProfile(
      opaqueSurfaceMaterialInteraction, minimalRayInteraction, minimalSurfaceInteraction,
      rayMask, sampledTransportPortalIndex, geometryFlags, viewRay,
      primarySurfaceIndex, pixelCoordinate,
      PrimaryWorldShadingNormal,
      randomState);

    visibility.hasOpaqueHit = (hasNonSssOpaqueHit && sssDiffusionProfileResult.allSamplesHaveHit);
  }

  hitDistance = visibility.hitDistance;
  hasOpaqueHit = visibility.hasOpaqueHit;
  illuminance = 0;

  if (visibility.hasOpaqueHit)
  {
    return;
  }
  
  // Evaluate the material and accumulate throughput and hit distance

  SurfaceMaterialInteractionSplitWeight emptyWeight;
  emptyWeight.diffuseReflectionWeight   = f16vec3(0.0h, 0.0h, 0.0h);
  emptyWeight.specularReflectionWeight  = f16vec3(0.0h, 0.0h, 0.0h);
  emptyWeight.diffuseTransmissionWeight = f16vec3(0.0h, 0.0h, 0.0h);

  SurfaceMaterialInteractionSplitWeight splitWeight =
    !hasNonSssOpaqueHit ?
    opaqueSurfaceMaterialInteractionCalcProjectedWeight(opaqueSurfaceMaterialInteraction, minimalRayInteraction, visibility.rayDirection) :
    emptyWeight;

  const float lightSampleThroughput = isValidLightSample ? invSelectionPdf / lightSample.solidAnglePdf : 0.0f;

  // Determine the weight for the lobes lobe

  // SSS is a generic version for diffuse, remove the diffuse lobe when SSS is enabled to avoid duplication.
  const f16vec3 diffuseLobeWeight = !isDiffusionProfileSss ? splitWeight.diffuseReflectionWeight : f16vec3(0.0h, 0.0h, 0.0h);
  const f16vec3 specularLobeWeight = splitWeight.specularReflectionWeight;
  const f16vec3 diffuseTransmissionLobeWeight = splitWeight.diffuseTransmissionWeight;

  // TODO: Handle Transmission Weight

  // Accumulate Radiance

  const vec3 commonLightThroughput = lightSampleThroughput * vec3(visibility.attenuation);
  const vec3 diffuseLobeLightThroughput = vec3(diffuseLobeWeight) * commonLightThroughput;
  const vec3 specularLobeLightThroughput = vec3(specularLobeWeight) * commonLightThroughput;
  const vec3 diffuseTransmissionLobeLightThroughput = vec3(diffuseTransmissionLobeWeight) * commonLightThroughput;
  // No need to multiply viz attenuation, it's has already been handled in the evalSssDiffusionProfile

  const vec3 diffuseAttenuatedRadiance = lightSample.radiance * diffuseLobeLightThroughput;
  const vec3 specularAttenuatedRadiance = lightSample.radiance * specularLobeLightThroughput;
  const vec3 diffuseTransmissionAttenuatedRadiance = lightSample.radiance * diffuseTransmissionLobeLightThroughput;

  // Accumulate SSS Radiance, we are not calculating the light throughput here because it's different for every SSS sample.
  // So, we have already multiply the throughput in the sssDiffusionProfileResult.scatteringWeight
  const vec3 subsurfaceScatteringAttenuatedRadiance = vec3(sssDiffusionProfileResult.scatteringWeight);

  diffuseLobeRadiance += throughput * (diffuseAttenuatedRadiance + diffuseTransmissionAttenuatedRadiance + subsurfaceScatteringAttenuatedRadiance);
  specularLobeRadiance += throughput * specularAttenuatedRadiance;

  // Illuminance for RTXDI gradients: just light sample radiance and visibility over sampling PDF
  illuminance = isValidLightSample ? calcBt709Luminance(commonLightThroughput * lightSample.radiance) : 0.0f;
}

void calculateRussianRouletteOnFirstBounce(
  inout RNG randomState,
  inout vec3 throughput,
  inout float16_t firstSampledSolidAnglePdf) 
{
  if (!(cb.enableRussianRoulette && cb.pathMinBounces == 0) ||
    // Unbiased NRC training paths don't use RR, but for sake of simplicity
    // and not having to specialize direct pass we disable RR for all NRC training and query paths.
    // Also NRC paths should be shorter and it results in better IQ if they end up in the cache 
    // rather than being terminated at bounce 0
      cb.enableNrc)
  {
    return;
  }

  // Russian Roulette
  // Note: This logic will conditionally terminate paths based on the effective throughput, allowing for
  // paths which contribute little to the final image to be shorter while paths which are more important
  // are allowed to be longer.

  float continueProbability =
    clamp(calcBt709Luminance(throughput), 
          cb.russianRoulette1stBounceMinContinueProbability,
          cb.russianRoulette1stBounceMaxContinueProbability);

  const float continueSample = getNextSampleBlueNoise(randomState);
  
  // Note: <= used to ensure path never continues if the probability is 0 (and to avoid NaNs in the
  // throughput when the probability is divided into it).
  bool terminate = continueProbability <= continueSample;

  if (terminate)
  {
    // Denote discarded paths with 0 throughput
    throughput = 0;
  }
  else
  {
    // Note: Factor the probability of continuing the path into the throughput. This causes odd brightness
    // in denoising when the continue probability is very low, but this math has been validated to be
    // correct as far as I can tell.
    throughput *= 1.0f / continueProbability;

    // Multiply RR probability into the first sampled solid angle pdf as well so that RR probability carries
    // over into calculateReSTIRGIRadianceFactor() in indirect pass
    firstSampledSolidAnglePdf *= float16_t(continueProbability);
  }
}

// Samples an indirect ray at ray path's first bounce
void sampleIndirectRayForFirstBounce(
  u16vec2 pixelCoordinate,
  Ray primaryRay,
  float16_t integrationSurfacePdf,
  MinimalRayInteraction primaryMinimalRayInteraction, 
  MinimalSurfaceInteraction primaryMinimalSurfaceInteraction,
  PolymorphicSurfaceMaterialInteraction primaryPolymorphicSurfaceMaterialInteraction,
  inout uint16_t mediumMaterialIndex,
  inout bool insideMedium,
  out bool mediumChanged,
  out Ray sampledRay,
  out vec3 throughput,
  out float16_t perceptualRoughness,
  out uint8_t firstRayPathSampledLobe,
  out float16_t firstSampledLobePdf,
  out float16_t firstSampledSolidAnglePdf,
  out bool firstSampledLobeIsSpecular)
{
  // Construct RNG as it is not carried in the path state
  RNG randomState = createRNG(pixelCoordinate, cb.frameIdx, PathState::calculateRNGOffsetOnFirstBounce(kRNGOffsetSampleFirstBounceDirection));

  // Note: Set the perceptual roughness only in the case of a material actually having roughness 
  // (which for now is only opaque, but may change in the future).
  perceptualRoughness = 0;

  if (polymorphicSurfaceMaterialInteractionGetTypeHelper(primaryPolymorphicSurfaceMaterialInteraction) == surfaceMaterialTypeOpaque)
  {
    perceptualRoughness = roughnessToPerceptualRoughness(
      opaqueSurfaceMaterialInteractionCreate(primaryPolymorphicSurfaceMaterialInteraction).isotropicRoughness);
  }

  // Note: Throughput starts off by dividing by the PDF for the integration surface from the g-buffer pass.
  // This is done to account for PSR-related decisions into the throughput so that the integration output (which is
  // stochastic, unlike the emissive outputs from the g-buffer pass) will not lose energy.
  throughput = 1.0f / integrationSurfacePdf;

  const bool oldInsideMedium = insideMedium;
  
  // Sample a new direction
  sampledRay = sampleDirection(randomState, insideMedium, throughput,
                               primaryRay, primaryMinimalRayInteraction, primaryMinimalSurfaceInteraction,
                               primaryPolymorphicSurfaceMaterialInteraction,
                               firstRayPathSampledLobe, firstSampledLobePdf, firstSampledSolidAnglePdf,
                               true);

  // Set the material medium index if a medium was entered or exited
  mediumChanged = evalMediumChange(oldInsideMedium, insideMedium, primaryPolymorphicSurfaceMaterialInteraction, mediumMaterialIndex);
  
  // Set the first sampled lobe type

  firstSampledLobeIsSpecular = true;

  if (polymorphicSurfaceMaterialInteractionGetTypeHelper(primaryPolymorphicSurfaceMaterialInteraction) == surfaceMaterialTypeOpaque)
  {
    // Note: Opacity on opaque objects treated as a specular lobe as it should be filtered like a reflection (not blurred).
    firstSampledLobeIsSpecular = firstRayPathSampledLobe != opaqueLobeTypeDiffuseReflection;
  }

  // Apply Russian Roulette prior to checking this ray path being valid to integrate
  calculateRussianRouletteOnFirstBounce(randomState, throughput, firstSampledSolidAnglePdf);
}

void sampleAndStoreIndirectRayPathSample(
  u16vec2 pixelCoordinate,
  Ray primaryRay,
  float16_t integrationSurfacePdf,
  MinimalRayInteraction primaryMinimalRayInteraction, 
  MinimalSurfaceInteraction primarySurfaceInteraction,
  PolymorphicSurfaceMaterialInteraction primaryPolymorphicSurfaceMaterialInteraction,
  inout GeometryFlags geometryFlags)
{
  uint16_t mediumMaterialIndex = SharedMediumMaterialIndex[pixelCoordinate];
  bool insideMedium = geometryFlags.insideMedium;

  bool mediumChanged;
  Ray sampledRay;
  vec3 throughput;
  float16_t perceptualRoughness;
  uint8_t firstRayPathSampledLobe;
  float16_t firstSampledSolidAnglePdf;
  float16_t firstSampledLobePdf;
  bool firstSampledLobeIsSpecular;

  // Sample an indirect ray
  sampleIndirectRayForFirstBounce(pixelCoordinate, primaryRay, integrationSurfacePdf,
                                  primaryMinimalRayInteraction, 
                                  primarySurfaceInteraction,
                                  primaryPolymorphicSurfaceMaterialInteraction,
                                  mediumMaterialIndex, insideMedium, 
                                  mediumChanged, sampledRay, throughput, perceptualRoughness, 
                                  firstRayPathSampledLobe, firstSampledLobePdf, firstSampledSolidAnglePdf, firstSampledLobeIsSpecular);

  // Serialize out the Medium Material Index if it changed
  if (mediumChanged)
  {
    imageStore(SharedMediumMaterialIndex, pixelCoordinate, mediumMaterialIndex);
  }

  // Output the sampled lobe information for the Indirect integration pass
  aliasedData0.IndirectRayOriginDirection[pixelCoordinate] = vec4(
    sampledRay.origin,
    uintBitsToFloat(float2x32ToSnorm2x16(sphereDirectionToSignedOctahedral(sampledRay.direction))));
  IndirectThroughputConeRadius[pixelCoordinate] = vec4(throughput, sampledRay.coneRadius);
  aliasedData1.IndirectFirstHitPerceptualRoughness[pixelCoordinate] = perceptualRoughness;

  IndirectSampleData indirectSampleData;
  indirectSampleData.firstSampledLobeIsSpecular = firstSampledLobeIsSpecular;
  indirectSampleData.firstSampledLobePdf = firstSampledLobePdf;
  indirectSampleData.firstSampledSolidAnglePdf = firstSampledSolidAnglePdf;
  indirectSampleData.insideMedium = insideMedium;
  indirectSampleData.store(pixelCoordinate, aliasedData2.IndirectFirstSampledLobeData);

  float totalPdf = 0;
  if (polymorphicSurfaceMaterialInteractionGetTypeHelper(primaryPolymorphicSurfaceMaterialInteraction) == surfaceMaterialTypeOpaque)
  {
    const OpaqueSurfaceMaterialInteraction opaqueSurfaceMaterialInteraction = opaqueSurfaceMaterialInteractionCreate(primaryPolymorphicSurfaceMaterialInteraction);
    totalPdf = NEECacheUtils.calculateBSDFSampleTotalPDF(opaqueSurfaceMaterialInteraction, primaryMinimalRayInteraction.viewDirection, sampledRay.direction, firstSampledSolidAnglePdf, firstSampledLobeIsSpecular);
  }
  
  NeeCacheThreadTask[pixelCoordinate] = asuint(vec2(totalPdf, 0));

  // Store the Geometry Flags with the new path information if it changed
  if (insideMedium != geometryFlags.insideMedium || firstSampledLobeIsSpecular != geometryFlags.firstSampledLobeIsSpecular)
  {
    geometryFlags.insideMedium = insideMedium;
    geometryFlags.firstSampledLobeIsSpecular = firstSampledLobeIsSpecular;
    geometryFlagsWriteToGBuffer(geometryFlags, pixelCoordinate, SharedFlags);
  }
 }

void integrateDirectPath(
  inout RNG randomState, ivec2 pixelCoordinate,
  DirectPathTextures directPathTextures,
  GeometryFlags geometryFlags, float16_t integrationSurfacePdf,
  Ray primaryRay, MinimalRayInteraction primaryMinimalRayInteraction, MinimalSurfaceInteraction primarySurfaceInteraction,
  PolymorphicSurfaceMaterialInteraction primaryPolymorphicSurfaceMaterialInteraction)
{

  // Note: Throughput starts off by dividing by the PDF for the integration surface from the g-buffer pass.
  // This is done to account for PSR-related decisions into the throughput so that the integration output (which is
  // stochastic, unlike the emissive outputs from the g-buffer pass) will not lose energy.
  vec3 throughput = 1.0f / integrationSurfacePdf;

  // Note: Emission not added in for the primary vertex as it is handled already by the G-Buffer
  // pass. This is done because these contributions are noise-free and do not need to be denoised.

  vec3 diffuseLobeRadiance = vec3(0.0f, 0.0f, 0.0f);
  vec3 specularLobeRadiance = vec3(0.0f, 0.0f, 0.0f);
  float lightHitDistance = 0.0f;
  float illuminance = 0;

  if (cb.enableDirectLighting && polymorphicSurfaceMaterialInteractionGetTypeHelper(primaryPolymorphicSurfaceMaterialInteraction) == surfaceMaterialTypeOpaque)
  {
    OpaqueSurfaceMaterialInteraction opaqueSurfaceMaterialInteraction = opaqueSurfaceMaterialInteractionCreate(primaryPolymorphicSurfaceMaterialInteraction);

    // Select a light for NEE

    LightSample lightSample;
    float inverseSelectionPdf;
    bool rtxdiLightSampleValid = false;
    bool risLightSampleValid = false;
    // Note: The Ray Portal index that the NEE light sample should be assumed to be sampled through.
    // Set to the invalid index if the light was not sampled through a Ray Portal.
    uint8_t sampledTransportPortalIndex = invalidRayPortalIndex;

    // Note: Use RTXDI for NEE only if it is requested and if the primary surface is being integrated as
    // running RTXDI on secondary surfaces will attempt to use lights from the primary surface which results
    // in poor quality lighting if the surface is in a significantly different spatial location.
    uint16_t lightIdx = kInvalidLightIdx;
    if (
      cb.enableRtxdi &&
      geometryFlags.primarySelectedIntegrationSurface)
    {
      // Select and sample a light for NEE via RTXDI
      rtxdiLightSampleValid = sampleLightRTXDI(
        pixelCoordinate,
        primarySurfaceInteraction,
        lightSample, inverseSelectionPdf, sampledTransportPortalIndex, lightIdx);
    }
    else
    {
      // Select and sample a light for NEE via RIS
      risLightSampleValid = sampleLightRIS(
        randomState,
        primarySurfaceInteraction, opaqueSurfaceMaterialInteraction, primaryMinimalRayInteraction.viewDirection,
        lightSample, inverseSelectionPdf, lightIdx);
    }

    const bool isDiffusionProfileSss = (cb.sssArgs.enableDiffusionProfile && isSubsurfaceDiffusionProfileMaterial(opaqueSurfaceMaterialInteraction));

    // Evaluate NEE
    if (rtxdiLightSampleValid || risLightSampleValid || isDiffusionProfileSss)
    {
      bool hasOpaqueHit = false;
      const bool isValidLightSample = (rtxdiLightSampleValid || risLightSampleValid);
      evalNEEPrimary(
        throughput, pixelCoordinate,
        diffuseLobeRadiance, specularLobeRadiance, lightHitDistance, hasOpaqueHit, illuminance,
        isValidLightSample, lightSample,
        inverseSelectionPdf, sampledTransportPortalIndex, geometryFlags,
        primaryRay, primaryMinimalRayInteraction, primarySurfaceInteraction,
        opaqueSurfaceMaterialInteraction,
        randomState);

      if (rtxdiLightSampleValid && hasOpaqueHit && cb.enableRtxdiDiscardInvisibleSamples)
      {
        RTXDI_Reservoir reservoir = RAB_LoadReservoir(pixelCoordinate, RTXDI_GetSpatialOutputPage());

        reservoir.lightIdx = RTXDI_INVALID_LIGHT_INDEX;
        reservoir.weightSum = 0;

        RAB_StoreReservoir(reservoir, pixelCoordinate, RTXDI_GetSpatialOutputPage());
      }
    }
  }

  // Output direct lighting radiance information

  if (geometryFlags.primarySelectedIntegrationSurface)
  {
    // Note: Output split direct lighting contribution only if the selected integration surface is primary,
    // the secondary surface uses a combined lighting contribution.
    directPathTextures.PrimaryDirectDiffuseLobeRadianceHitDistance[pixelCoordinate] =
      sanitizeRadianceHitDistance(diffuseLobeRadiance, lightHitDistance);
    directPathTextures.PrimaryDirectSpecularLobeRadianceHitDistance[pixelCoordinate] =
      sanitizeRadianceHitDistance(specularLobeRadiance, lightHitDistance);
    // Store the surface illuminance for gradient computation.
    directPathTextures.PrimaryRtxdiIlluminance[pixelCoordinate] = illuminance;
  }
  else
  {
    float4 secondaryCombinedDiffuseLobeRadianceHitDistance;
    float4 secondaryCombinedSpecularLobeRadianceHitDistance;

    // Note: For secondary surfaces, output the direct lighting radiance for the opposing lobe as usual and set
    // the current lobe direct lighting radiance into the current lobe output, intended to be summed into in
    // the indirect signal (as this acts as a fine way to carry the state between passes, the actual
    // output packing/firefly filtering will happen in the demodulate pass as well).
    if (geometryFlags.firstSampledLobeIsSpecular)
    {
      secondaryCombinedDiffuseLobeRadianceHitDistance = sanitizeRadianceHitDistance(diffuseLobeRadiance, lightHitDistance);
      secondaryCombinedSpecularLobeRadianceHitDistance = float4(specularLobeRadiance, kEmptyPixelHitDistance);
    }
    else
    {
      secondaryCombinedDiffuseLobeRadianceHitDistance = float4(diffuseLobeRadiance, kEmptyPixelHitDistance);
      secondaryCombinedSpecularLobeRadianceHitDistance = sanitizeRadianceHitDistance(specularLobeRadiance, lightHitDistance); 
    }

    directPathTextures.SecondaryCombinedDiffuseLobeRadianceHitDistance[pixelCoordinate] = secondaryCombinedDiffuseLobeRadianceHitDistance;
    directPathTextures.SecondaryCombinedSpecularLobeRadianceHitDistance[pixelCoordinate] = secondaryCombinedSpecularLobeRadianceHitDistance;
    directPathTextures.PrimaryRtxdiIlluminance[pixelCoordinate] = 0;
  }
  
  integratorDirectPathOutputDebugView(pixelCoordinate, directPathTextures, geometryFlags);
}

void integratorDirectPathOutputDebugView(
  uvec2 pixelCoordinate,
  DirectPathTextures directPathTextures,
  GeometryFlags geometryFlags)
{
  IndirectSampleData indirectSampleData;

  switch(cb.debugView)
  {
  default:
  case DEBUG_VIEW_DISABLED:
    break;
  case DEBUG_VIEW_NOISY_SECONDARY_DIRECT_DIFFUSE_RADIANCE:
  {
    if (!geometryFlags.primarySelectedIntegrationSurface)  
      storeInDebugView(pixelCoordinate, directPathTextures.SecondaryCombinedDiffuseLobeRadianceHitDistance[pixelCoordinate].xyz);
    else
      storeInDebugView(pixelCoordinate, 0);
    break;
  }
  case DEBUG_VIEW_NOISY_SECONDARY_DIRECT_SPECULAR_RADIANCE:
  {
    if (!geometryFlags.primarySelectedIntegrationSurface)  
      storeInDebugView(pixelCoordinate, directPathTextures.SecondaryCombinedSpecularLobeRadianceHitDistance[pixelCoordinate].xyz);
    else
      storeInDebugView(pixelCoordinate, 0);
    break;
  }
  case DEBUG_VIEW_NOISY_SECONDARY_DIRECT_RADIANCE:
  {
    if (!geometryFlags.primarySelectedIntegrationSurface)  
    {
      storeInDebugView(pixelCoordinate, 
        directPathTextures.SecondaryCombinedDiffuseLobeRadianceHitDistance[pixelCoordinate].xyz +
        directPathTextures.SecondaryCombinedSpecularLobeRadianceHitDistance[pixelCoordinate].xyz);
    }
    break;
  }
  case DEBUG_VIEW_PERCEPTUAL_ROUGHNESS:
    storeInDebugView(pixelCoordinate, directPathTextures.IndirectFirstHitPerceptualRoughness[pixelCoordinate]);
    break;
  case DEBUG_VIEW_INTEGRATE_INDIRECT_FIRST_RAY_THROUGHPUT:
    storeInDebugView(pixelCoordinate, directPathTextures.IndirectThroughputConeRadius[pixelCoordinate].xyz);
    break;
  case DEBUG_VIEW_INTEGRATE_INDIRECT_FIRST_SAMPLED_LOBE_PDF:
    indirectSampleData.load(pixelCoordinate, aliasedData2.IndirectFirstSampledLobeData);
   storeInDebugView(pixelCoordinate, indirectSampleData.firstSampledLobePdf);
    break;
  case DEBUG_VIEW_INTEGRATE_INDIRECT_FIRST_SAMPLED_SOLID_ANGLE_PDF:
    indirectSampleData.load(pixelCoordinate, aliasedData2.IndirectFirstSampledLobeData);
    storeInDebugView(pixelCoordinate, indirectSampleData.firstSampledSolidAnglePdf);
    break;
  case DEBUG_VIEW_NAN:
  {
    bool isValid = true;
    
    isValid &= isValidValue(directPathTextures.IndirectFirstHitPerceptualRoughness[pixelCoordinate]);
    isValid &= isValidValue(directPathTextures.IndirectThroughputConeRadius[pixelCoordinate]);

    indirectSampleData.load(pixelCoordinate, aliasedData2.IndirectFirstSampledLobeData);
    isValid &= isValidValue(indirectSampleData.firstSampledLobePdf);
    isValid &= isValidValue(indirectSampleData.firstSampledSolidAnglePdf);
    
    accumulateInDebugViewAnd(pixelCoordinate, isValid);
    break;
  }
  }
}

