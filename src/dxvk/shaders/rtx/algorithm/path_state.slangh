/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/concept/ray_portal/ray_portal.slangh"
#include "rtx/utility/packing.slangh"
#include "rtx/concept/payload/payload.slangh"
#include "rtx/algorithm/resolve_expanded.slangh"

// RNG state is not carried via PathState from RayGen to Hit shader, 
// but instead it is reconstructed using following explicit constants.
// Hit shaders reuse the RNG state within its scope
// Direction sample takes 3 samples - 1 for a lobe selection and 2 for a 2D uv sample
static const uint kRNGOffsetSampleFirstBounceDirection = 0;
// Russian roulette on first bounce takes the sampleOffset 3 (carried over as live RNG state)
// RNG state is not carried between Raygen and closest hit shaders (CHS), so RNG state is recreated
// at CHS start with a following explicit offset
static const uint kRNGOffsetSampleClosestHitShader = 4;

// Approximate number of rng samples per bounce
static const uint kApproxRNGSamplesPerBounce = 16;

#define NEE_CACHE_STATE_DISABLED 0
#define NEE_CACHE_STATE_LAST_ENABLED 1
#define NEE_CACHE_STATE_ENABLED 2

// Path state to be passed to functions (or the CHS) handling a path vertex.
struct PathState
{
  u16vec2 pixelCoordinate;
  uint8_t bounceIteration;
  // Note: These ray properties are passed into the function with the state of the
  // ray being cast as an input, and then set to the new state of the sampled ray
  // (if applicable) as an output.
  vec3 origin;
  float16_t coneRadius;
  f16vec3 direction;
  float16_t coneSpreadAngle;

  // Note: Radiance, throughput and hit distances are passed in and then written back out
  // so they can be accumulated into in the path tracing loop.
  vec3 radiance;
  vec3 throughput;
  float16_t firstBounceHitDistance; // Note: The total hit distance of the resolve for the first bounce.
  uint16_t mediumMaterialIndex;

  // Note: Needed output for Resolve function. Indicates that more resolve work needs to happen
  // and hits should not be counted until finished. Could be omitted from input memory payload
  // if extra flag space is needed, but kept there for now for simplicity.
  bool continueResolving;
  // Note: Used as an input and output to indicate when the path should finish. Set to true either
  // when the max bounce count is hit or when terminated due to a russian roulette style heuristic.
  bool continuePath;
  // Note: Used to keep track of if a ray is inside a translucent medium or not, used as both an
  // input and an output to keep a persistent state across calls.
  bool insideMedium;
  bool decalEncountered;

  uint8_t rayMask;

  PortalSpace2BitsType portalSpace;
  // Track the portal ID that an indirect ray crosses, only lowest 2 bits are used
  uint8_t indirectLightPortalID;
  bool restirGiHasFoundRoughSurface;
  bool restirGiHasHitGeometry;

  float accumulatedHitDistance;
  float solidAnglePdf;
  uint16_t neeCacheCellOffset;
  bool enableNeeCacheAfterFirstBounce;

  // Calculates an RNG offset at a start of a bounce set in the path state
  uint calculateRNGOffset(uint sampleOffset) 
  {
    return bounceIteration * kApproxRNGSamplesPerBounce + sampleOffset;
  }

  static uint calculateRNGOffsetOnFirstBounce(uint sampleOffset) 
  {
    return sampleOffset;
  } 
}

// Packed memory structure to send to the CHS in the TraceRay path.
// Todo: Test the effects of packing this more (for example, 16 bit floats for throughput as ideally it should)
// be either fairly close to 1 or less when attenuated, perhaps even scaled a bit depending on its range of values.
struct MemoryPathState : IPayload
{
  vec3 origin;
  uint data0; // bounceIteration(uint:4b), restirGiHasHitGeometry(bool:1b), unused(3b), coneSpreadAngle(float16), mediumMaterialIndexLow(uint:8b)

  uvec3 encodedRadiance; // unused (x:1b, z:1b)
  uint encodedDirection;

  uvec3 encodedThroughput;
  uint data1; // unused(7b),
              // restirGiHasFoundRoughSurface(bool:1b) 
              // RayMask(uint8_t:8b), 
              // PortalSpace(uint:2b), 
              // indirectLightPortalID(uint:2b), 
              // mediumMaterialIndexHigh(uint:8b),
              // Unused (4b)

  uint coneRadiusAndHitDistance; // float16_t, float16_t
  float accumulatedHitDistance;
  uint solidAnglePdfAndNeeCacheCellOffset;

  static MemoryPathState pack(PathState pathState)
  {
    MemoryPathState ret;

    ret.data0 =
      (pathState.bounceIteration & 0xf) |
      (uint32_t(pathState.restirGiHasHitGeometry) << 4) |
      (uint32_t(float16BitsToUint16(pathState.coneSpreadAngle)) << 8) |
      (uint32_t(pathState.mediumMaterialIndex & 0xff) << 24);

    ret.data1 =
      (uint32_t(pathState.enableNeeCacheAfterFirstBounce) << 6) | 
      (uint32_t(pathState.restirGiHasFoundRoughSurface) << 7) | 
      (uint32_t(pathState.rayMask) << 8) | 
      (uint32_t(pathState.portalSpace) << 16) |
      (uint32_t(pathState.indirectLightPortalID) << 18) |
      (uint32_t(pathState.mediumMaterialIndex >> 8) << 20);

    ret.origin = pathState.origin;
    ret.encodedDirection = sphereDirectionToSnorm2x16(pathState.direction);
    ret.coneRadiusAndHitDistance = packFloat2x16(f16vec2(pathState.coneRadius, pathState.firstBounceHitDistance));

    // Note: Encode flags into the sign bits of each coordinate. This must be done manually because -0 may not be properly
    // stored if the throughput/radiance is 0 as -0 and +0 tend to be treated the same. Note this assumes the
    // throughput/radiance is always positive to function properly.
    uvec3 encodedRadiance = floatBitsToUint(pathState.radiance);
    uvec3 encodedThroughput = floatBitsToUint(pathState.throughput);


    encodedRadiance.y = packedFlagSet(
      encodedRadiance.y, pathState.decalEncountered ? (1 << 31) : 0);

    encodedThroughput.x = packedFlagSet(
      encodedThroughput.x, pathState.continueResolving ? (1 << 31) : 0);
    encodedThroughput.y = packedFlagSet(
      encodedThroughput.y, pathState.continuePath ? (1 << 31) : 0);
    encodedThroughput.z = packedFlagSet(
      encodedThroughput.z, pathState.insideMedium ? (1 << 31) : 0);

    ret.encodedRadiance = encodedRadiance;
    ret.encodedThroughput = encodedThroughput;
    ret.accumulatedHitDistance = pathState.accumulatedHitDistance;
    ret.solidAnglePdfAndNeeCacheCellOffset = (float16BitsToUint16(pathState.solidAnglePdf) | (uint32_t(pathState.neeCacheCellOffset) << 16));

    
    return ret;
  }

  uint bounceIteration() 
  {
    return data0 & 0xf;
  }

#ifdef RAY_PIPELINE
  PathState unpack()
  {
    PathState pathState;

    pathState.pixelCoordinate = DispatchRaysIndex().xy;

    pathState.bounceIteration = bounceIteration();
    pathState.coneSpreadAngle = uint16BitsToHalf(data0 >> 8);
    pathState.restirGiHasHitGeometry = (data0 >> 4) & 0b1;
    pathState.origin = origin;
    pathState.direction = snorm2x16ToSphereDirection(encodedDirection);

    pathState.radiance = abs(uintBitsToFloat(encodedRadiance));
    pathState.throughput = abs(uintBitsToFloat(encodedThroughput));
    pathState.coneRadius = unpackFloat2x16(coneRadiusAndHitDistance).x;
    pathState.firstBounceHitDistance = unpackFloat2x16(coneRadiusAndHitDistance).y;
    pathState.mediumMaterialIndex =
      ((data0 >> 24) & 0xff) |
      (((data1 >> 20) & 0xff) << 8);

    pathState.continueResolving = packedFlagGet(encodedThroughput.x, 1 << 31);
    pathState.continuePath = packedFlagGet(encodedThroughput.y, 1 << 31);
    pathState.insideMedium = packedFlagGet(encodedThroughput.z, 1 << 31);
    pathState.decalEncountered = packedFlagGet(encodedRadiance.y, 1 << 31);

    pathState.enableNeeCacheAfterFirstBounce = (data1 >> 6) & 0b1;
    pathState.restirGiHasFoundRoughSurface = (data1 >> 7) & 0b1;
    pathState.rayMask = (data1 >> 8) & 0xff;
    pathState.portalSpace = (data1 >> 16) & 0b11;
    pathState.indirectLightPortalID = (data1 >> 18) & 0b11;
    pathState.accumulatedHitDistance = accumulatedHitDistance;
    pathState.solidAnglePdf = uint16BitsToHalf(solidAnglePdfAndNeeCacheCellOffset & 0xffff);
    pathState.neeCacheCellOffset = (solidAnglePdfAndNeeCacheCellOffset >> 16);

    return pathState;
  }
#ifdef RT_SHADER_EXECUTION_REORDERING
  bool shouldReorder(out uint coherenceHints, out uint numCoherenceHints)
  {
    coherenceHints = 0;
    numCoherenceHints = 0;

    // getSeparateUnorderedApproximationsActive(...)
    if (cb.enableSeparateUnorderedApproximations &&
        cb.enableUnorderedResolveInIndirectRays) 
    {
      addCoherenceHintAsLeastImportant1Bit(bounceIteration() <= 1, coherenceHints, numCoherenceHints);
    }

    return true;
  }

#else
  bool shouldReorder(out uint coherenceHints, out uint numCoherenceHints)
  {
    coherenceHints = 0;
    numCoherenceHints = 0;
    return false;
  }
#endif

#endif // defined(RAY_PIPELINE)
}

struct DirectPathTextures
{
  RWTexture2D<uint> SharedFlags;
  RWTexture2D<uint> SharedMediumMaterialIndex;
  RWTexture2D<float4> PrimaryDirectDiffuseLobeRadianceHitDistance;
  RWTexture2D<float4> PrimaryDirectSpecularLobeRadianceHitDistance;
  RWTexture2D<float4> SecondaryCombinedDiffuseLobeRadianceHitDistance;
  RWTexture2D<float4> SecondaryCombinedSpecularLobeRadianceHitDistance;
  RWTexture2D<float4> IndirectRayOriginDirection;
  RWTexture2D<float4> IndirectThroughputConeRadius;
  RWTexture2D<float> IndirectFirstHitPerceptualRoughness;
  RWTexture2D<float> PrimaryRtxdiIlluminance;
};

struct IndirectPathTextures
{
  Texture2D<float4> PrimaryWorldPositionWorldTriangleNormal;
  RWTexture2D<float4> IndirectRadianceHitDistance;
  REORDER_COHERENT RWTexture2D<float4> RestirGIRadiance;
  RWTexture2D<float4> RestirGIHitGeometry; 
  Texture2D<float2> GBufferLast;
};