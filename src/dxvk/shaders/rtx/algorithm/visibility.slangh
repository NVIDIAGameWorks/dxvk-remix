/*
* Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/concept/ray/ray.slangh"
#include "rtx/concept/surface/surface.slangh"
#include "rtx/concept/surface_material/surface_material.slangh"
#include "rtx/utility/packing.slangh"
#include "rtx/algorithm/resolve.slangh"
#include "rtx/algorithm/volume_lighting.slangh"

static const uint visibilityModeNone = 0;
static const uint visibilityModeAccurateHitDistance = (1 << 0);        // Return the closest hit and not just any opaque hit
static const uint visibilityModeEnableTranslucentMaterials = (1 << 1); // Evaluate translucent materials or skip them
static const uint visibilityModeDisableCulling = (1 << 2);             // Disable backface culling on triangles (ignoring the game's original winding and culling mode specifications).
static const uint visibilityModeEnableSubsurfaceMaterials = (1 << 3);  // Enable subsurface materials or skip them
static const uint visibilityModeEnablePom = (1 << 4);                  // Enable parallax occlusion mapping visibility
static const uint visibilityModeOpaqueOnly = (1 << 5);                 // Only query visibility for opaque only, no alphatest/blend

// Visibility Helper Functions

// Returns the attenuation factor for the surface, i.e. (1.0 - opacity)
f16vec3 handleVisibilityVertex<let VisibilityMode : uint>(Ray ray, RayHitInfo rayHitInfo, const bool usePreviousTLAS)
{
  RayInteraction rayInteraction = rayInteractionCreate(ray, rayHitInfo);
  
  if (usePreviousTLAS)
  {
    // View model instances don't have an inter-frame mapping, assume they're transparent
    if (rayHitInfo.customIndex & CUSTOM_INDEX_IS_VIEW_MODEL)
    {
      return 1.0;
    }

    // Map the surface index from the previous frame to the current frame
    rayInteraction.surfaceIndex = surfaceMapping[rayInteraction.surfaceIndex];

    if (rayInteraction.surfaceIndex == BINDING_INDEX_INVALID)
    {
      // Surface no longer exists - assume it was transparent, which is safer than
      // assuming an opaque surface, because that would introduce more bias in ReSTIR
      return 1.0;
    }
  }

  Surface surface = surfaces[uint(rayInteraction.surfaceIndex)]; 

  // Since during visibility testing, we dont need all the data, we can just explicitly
  //   initialize these values and  help the compiler generate more optimal code paths.
  const bool requiresNormalsAndTangents = VisibilityMode & (visibilityModeEnableSubsurfaceMaterials|visibilityModeEnableTranslucentMaterials);
  {
    surface.decalSortOrder = 0;
    surface.objectPickingValue = 0;
    surface.hashPacked = 0;
    surface.texcoordGenerationMode = (uint8_t) TexGenMode::None;

    if (!usePreviousTLAS)
    {
      surface.previousPositionBufferIndex = BINDING_INDEX_INVALID;
      surface.prevObjectToWorld = mat4x3(1.f, 0.f, 0.f, 0.f,  0.f, 1.f, 0.f, 0.f,  0.f, 0.f, 1.f, 0.f);
    }

    if (!requiresNormalsAndTangents)
    {
      surface.normalBufferIndex = BINDING_INDEX_INVALID;
      surface.normalObjectToWorld = getIdentityMatrix();
    }
  }

  SurfaceInteraction surfaceInteraction = surfaceInteractionCreate<requiresNormalsAndTangents ? SurfaceGenerateTangents : SurfaceIgnoreTangents>(surface, rayInteraction, ray, usePreviousTLAS);

  if (isSurfaceClipped(surface, surfaceInteraction))
  {
    // Ignore parts of surfaces that are under clip planes
    return 1.0;
  }

  const MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial = surfaceMaterials[rayInteraction.surfaceIndex];
  
  const uint8_t polymorphicType = rayInteraction.materialType;

  if (polymorphicType == surfaceMaterialTypeOpaque)
  {
    const OpaqueSurfaceMaterial opaqueSurfaceMaterial = opaqueSurfaceMaterialCreate(memoryPolymorphicSurfaceMaterial, true);

    const OpaqueSurfaceMaterialInteraction opaqueSurfaceMaterialInteraction =
      opaqueSurfaceMaterialInteractionCreate(opaqueSurfaceMaterial, surface, surfaceInteraction, rayInteraction);

    const bool isThinOpaqueSubsurface = (VisibilityMode & visibilityModeEnableSubsurfaceMaterials) && isThinOpaqueSubsurfaceMaterial(opaqueSurfaceMaterialInteraction);

    const bool handleStochasticAlphaBlend =
      cb.enableStochasticAlphaBlend &&
      opaqueSurfaceMaterialInteraction.opacity > cb.resolveTransparencyThreshold &&
      opaqueSurfaceMaterialInteraction.opacity <= cb.resolveStochasticAlphaBlendThreshold;

    // We need to calculate the attenuation with opaque surface opacity in these 2 cases:
    //   1. The surface doesn't have subsurface (do traditional alpha-blending)
    //   2. The surface has subsurface, but the surface point need to be discarded because it fails the alpha-test.
    //      This is necessary for subsurface material or the alpha-test will be ignored.
    if (!isThinOpaqueSubsurface || handleStochasticAlphaBlend || opaqueSurfaceMaterialInteraction.opacity <= cb.resolveTransparencyThreshold)
    {
      return 1.0h - opaqueSurfaceMaterialInteraction.opacity;
    }
    
    if (VisibilityMode & visibilityModeEnableSubsurfaceMaterials)
    {
      const float16_t normalDotOutputDirection = dot(-ray.direction, opaqueSurfaceMaterialInteraction.shadingNormal);
      if (normalDotOutputDirection < materialEpsilon)
      {
        return 0.0h;
      }
    
      const SubsurfaceMaterial subsurfaceMaterial = subsurfaceMaterialCreate(opaqueSurfaceMaterialInteraction.subsurfaceMaterialInteraction);
    
      // Approximate the attenuation with assumption that input and output rays are on the same line and the volume is isotropic
      const float16_t baseReflectivity = calcBt709Luminance(opaqueSurfaceMaterialInteraction.baseReflectivity);
      const float16_t insideRelativeRefractiveIndex = baseReflectivityToIoR(materialIoRVacuum, baseReflectivity) / materialIoRVacuum;
    
      // Calculate path integral throughput/weight
      const float16_t outsideFresnel = evalTranslucentSchlickFresnel(baseReflectivity, normalDotOutputDirection);
      const float16_t insideFresnel = evalTranslucentSchlickFresnelTIR(baseReflectivity, insideRelativeRefractiveIndex, normalDotOutputDirection);
      const float16_t attenuationDistance = subsurfaceMaterial.measurementDistance * subsurfaceMaterial.measurementDistance;
      const f16vec3 attenuation = evalBeerLambertAttenuation(subsurfaceMaterial.volumetricAttenuationCoefficient, attenuationDistance * rcp(float(normalDotOutputDirection)));
    
      if (insideFresnel >= 1.0h)
      {
        return 0.0h;
      }
    
      return subsurfaceMaterial.singleScatteringAlbedo * (1.0f - outsideFresnel) * (1.0f - insideFresnel) *
              safePositiveDivide((subsurfaceMaterial.volumetricAttenuationCoefficient * attenuationDistance),
              normalDotOutputDirection, materialEpsilon) *
              rcp(fourPi) * attenuation;
    }
  }
  else if ((VisibilityMode & visibilityModeEnableTranslucentMaterials) && polymorphicType == surfaceMaterialTypeTranslucent)
  {
    const TranslucentSurfaceMaterial translucentSurfaceMaterial = translucentSurfaceMaterialCreate(memoryPolymorphicSurfaceMaterial, true);

    // Extract the thin walled flag before evaluating the material interaction
    const bool isThinWalled = translucentSurfaceMaterial.thicknessOrMeasurementDistance < float16_t(0);

    // Only evaluate the translucent attenuation for thin-walled materials because we're doing an unordered
    // traversal and don't know the distance traveled in a thick material.
    if (isThinWalled)
    {
      const TranslucentSurfaceMaterialInteraction translucentSurfaceMaterialInteraction =
        translucentSurfaceMaterialInteractionCreate(translucentSurfaceMaterial, surface, surfaceInteraction, rayInteraction);

      // Approximate the attenuation distance based on the triangle normal
      const float16_t thickness = translucentSurfaceMaterialInteractionGetThinWallThickness(translucentSurfaceMaterialInteraction);
      const float16_t attenuationDistance = abs(evalThinAttenuationDistance(thickness, surfaceInteraction.triangleNormal, ray.direction));
      const f16vec3 attenuationCoefficient = transmittanceToAttenuationCoefficient(translucentSurfaceMaterialInteraction.transmittanceColor, 1.0);
      const f16vec3 volumeAttenuation = evalBeerLambertAttenuation(attenuationCoefficient, attenuationDistance);

      return volumeAttenuation;
    }
  }

  return float16_t(1.0);
}

void applyPortalTextureTransform(RayPortalHitInfo portal, inout float2 textureCoordinates)
{
  float3x2 textureTransform;
  textureTransform[0] = unpackFloat2x16(portal.textureTransform.x);
  textureTransform[1] = unpackFloat2x16(portal.textureTransform.y);
  textureTransform[2] = unpackFloat2x16(portal.textureTransform.z);
  textureCoordinates = mul(float3(textureCoordinates, 1.0), textureTransform);
}

float16_t getRayPortalTransparency(
  Ray ray,
  RayPortalHitInfo portal,
  out float t)
{
  // Compute the ray-plane intersection.
  // Treat rays coming from behind the portal as not intersecting with it.
  const float NdotD = dot(ray.direction, portal.normal);
  t = dot(portal.centroid - ray.origin, portal.normal) / NdotD;
  if (isinf(t) || isnan(t))
  {
    t = -1.0;
  }
  
  if (0 <= t && t <= ray.tMax && NdotD < 0)
  {
    const vec3 p = ray.origin + ray.direction * t;
    const vec3 cToP = p - portal.centroid.xyz;
    vec2 uv;
    uv.x = dot(cToP, portal.xAxis.xyz) * portal.inverseHalfWidth;
    uv.y = dot(cToP, portal.yAxis.xyz) * portal.inverseHalfHeight;

    if (max(abs(uv.x), abs(uv.y)) < 1.0)
    {
      // Create a Surface for the intersection with the Portal
      // Note: This is a rather ad-hoc way of creating a Surface/Surface Interaction as doing a full Surface deserialization just for
      // visibility rays is probably too costly. As such though this code may break in the future if the way Surface Interactions
      // are constructed changes, so it is rather fragile and ideally a better way to do this should be devised. With Slang generics this
      // can be improved such that it can use duck typing rather than having things accidently read uninitialized members and cause bugs
      // silently (note that we leave the other values in these structs uninitialized so they will cause bugs faster if a regression happens).
      // Also note that this does not set up texture gradients properly so this will always likely sample from the lowest mip level
      // which is also probably not great for performance.

      Surface surface = (Surface)0;
      surface.spriteSheetRows = portal.spriteSheetRows;
      surface.spriteSheetCols = portal.spriteSheetCols;
      surface.spriteSheetFPS = portal.spriteSheetFPS;

      SurfaceInteraction surfaceInteraction = (SurfaceInteraction)0;
      surfaceInteraction.textureCoordinates = uv * 0.5f + 0.5f;
      surfaceInteraction.textureGradientX = vec2(0.0f);
      surfaceInteraction.textureGradientY = vec2(0.0f);

      applyPortalTextureTransform(portal, surfaceInteraction.textureCoordinates);
      // Note: No spritesheet adjustment done here as this is skipped for Surfaces using a Ray Portal material anyways
      // as it is done in the Surface Material Interaction construction instead.

      // Calculate the transparency from the Portal's material

      RayPortalSurfaceMaterial rayPortalSurfaceMaterial;
      rayPortalSurfaceMaterial.samplerIndex = portal.samplerIndex;
      rayPortalSurfaceMaterial.samplerIndex2 = portal.samplerIndex2;
      rayPortalSurfaceMaterial.maskTextureIndex = portal.maskTextureIndex;
      rayPortalSurfaceMaterial.maskTextureIndex2 = portal.maskTextureIndex2;
      rayPortalSurfaceMaterial.rotationSpeed = uint16BitsToHalf(portal.rotationSpeed);
      rayPortalSurfaceMaterial.emissiveIntensity = uint16BitsToHalf(portal.emissiveIntensity);
      rayPortalSurfaceMaterial.rayPortalIndex = portal.rayPortalIndex;
      
      const RayPortalSurfaceMaterialInteraction rayPortalSurfaceMaterialInteraction = rayPortalSurfaceMaterialInteractionCreate(rayPortalSurfaceMaterial, surface, surfaceInteraction);

      if (!rayPortalSurfaceMaterialInteraction.isInsidePortal)
      {
        return 0.0h;
      }

      return saturate(1.0h - rayPortalSurfaceMaterialInteraction.mask.a);
    }
  }

  return 0.0h;
}

struct VisibilityResult {
  f16vec3 attenuation;
  f16vec3 rayDirection;
  float hitDistance;
  bool hasOpaqueHit;
  bool hasPOMHit;
};

VisibilityResult traceVisibilityRay<let VisibilityMode : uint>(
  Ray visibilityRay,
  uint8_t rayMask, uint8_t expectedRayPortalIndex, PortalSpace2BitsType rayOriginPortalSpace,
  // ViewModel instances are not to occlude anything but rays originating from a ViewModel surface
  bool hasRayOriginatedFromViewModel = false,
  bool usePreviousTLAS = false,
  bool clearOpaqueHitAttenuation = true)
{
  // Exclude the portals from the ray mask because we have special handling for them.
  rayMask &= ~OBJECT_MASK_PORTAL;

  PortalSpace2BitsType portalSpace = rayOriginPortalSpace;  // Assign to local variable since it's being modified

  VisibilityResult result;
  result.rayDirection = visibilityRay.direction;

  const float originalTMax = visibilityRay.tMax;

  // If we're expecting to cross a particular portal, test whether the ray intersects that portal first.
  // If it doesn't, there's no need to trace any rays as the result is always "invisible".
  float portalIntersectionT = 0;
  float16_t portalTransparency = 1.0;
  if (expectedRayPortalIndex != invalidRayPortalIndex)
  {
    const RayPortalHitInfo rayPortalHitInfo = cb.rayPortalHitInfos[int(expectedRayPortalIndex)];

    portalTransparency = getRayPortalTransparency(visibilityRay, rayPortalHitInfo, portalIntersectionT);
    if (portalTransparency == float16_t(0))
    {
      result.attenuation = 0;
      result.hitDistance = visibilityRay.tMax; // We don't know the distance, but whatever
      result.hasOpaqueHit = true;
      return result;
    }

    visibilityRay.tMax = portalIntersectionT;
  }

  // Initialize the result with full transmission
  result.attenuation = f16vec3(1.0);
  result.hitDistance = visibilityRay.tMax;
  result.hasOpaqueHit = false;
  result.hasPOMHit = false;

  uint rayFlags = (VisibilityMode & visibilityModeAccurateHitDistance)
    ? RAY_FLAG_NONE
    : RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;

  // Note: Enable culling of backfacing triangles only if culling is actually desired on this visibility ray.
  if (cb.enableCullingSecondaryRays)
  {
    rayFlags |= (VisibilityMode & visibilityModeDisableCulling)
      ? 0
      : RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
  }

  while (true)
  {
    RayQuery<0> rayQuery = RayQuery<0>();

    if (usePreviousTLAS)
    {
      rayQuery.TraceRayInline(
        previousTopLevelAS,
        rayFlags, rayMask,
        rayToRayDesc(visibilityRay)
      );
    }
    else
    {
      rayQuery.TraceRayInline(
        topLevelAS,
        rayFlags, rayMask,
        rayToRayDesc(visibilityRay)
      );
    }


    while (rayQuery.Proceed())
    {
      if ((VisibilityMode & visibilityModeOpaqueOnly) == 0 && rayQuery.CandidateType() == CANDIDATE_NON_OPAQUE_TRIANGLE)
      {
        RayHitInfo rayHitInfo;
        RAY_HIT_INFO_CREATE_RAY_QUERY_CANDIDATE(rayHitInfo, rayQuery)

        f16vec3 surfaceAttenuation = handleVisibilityVertex<VisibilityMode>(visibilityRay, rayHitInfo, usePreviousTLAS);

        f16vec3 prevAttenuation = result.attenuation;
        result.attenuation *= surfaceAttenuation;

        // Find an opaque hit
        if ((float16_t(1) - calcBt709Luminance(result.attenuation)) >= cb.resolveOpaquenessThreshold)
        {
          // If opaque hit is not considered in the attenuation term, need to recover previous attenuation.
          if (!clearOpaqueHitAttenuation)
          {
            result.attenuation = prevAttenuation;
          }
          rayQuery.CommitNonOpaqueTriangleHit();
          break;
        }
      }
    };

    if (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT)
    {
      if (clearOpaqueHitAttenuation)
      {
        result.attenuation = f16vec3(0.0);
      }
      result.hitDistance = rayQuery.CommittedRayT();
      result.hasOpaqueHit = true;

      // If we already went through a portal, add the path segment before the portal
      if (expectedRayPortalIndex == invalidRayPortalIndex)
        result.hitDistance += portalIntersectionT;

      break;
    }

    if (expectedRayPortalIndex != invalidRayPortalIndex)
    {
      RayPortalHitInfo rayPortalHitInfo = cb.rayPortalHitInfos[uint(expectedRayPortalIndex)];
      mat4 teleportMatrix = rayPortalHitInfo.encodedPortalToOpposingPortalDirection.unpack();

      // Teleport the ray to the opposite portal
      vec3 portalIntersectionPosition = visibilityRay.origin + visibilityRay.direction * portalIntersectionT;
      visibilityRay.origin = (mul(teleportMatrix, vec4(portalIntersectionPosition, 1.0f))).xyz;
      visibilityRay.direction = normalize(mul(mat3(teleportMatrix), visibilityRay.direction));
      visibilityRay.tMax = max(0, originalTMax - portalIntersectionT);
      visibilityRay.coneRadius += float16_t(visibilityRay.spreadAngle * portalIntersectionT);

      // Apply the portal mask
      result.attenuation *= portalTransparency;

      updateStateOnPortalCrossing(portalSpace, rayMask, expectedRayPortalIndex, hasRayOriginatedFromViewModel);

      // We only support going through one portal, so don't iterate after the next ray
      expectedRayPortalIndex = invalidRayPortalIndex;
    }
    else
    {
      // No ray portals left
      break;
    }
  }
  
  return result;
}

VisibilityResult traceVisibilityRay<let VisibilityMode : uint>(
  MinimalSurfaceInteraction minimalSurfaceInteraction, float3 targetPosition,
  uint8_t rayMask, uint8_t expectedRayPortalIndex, PortalSpace2BitsType rayOriginPortalSpace, bool pomOpaqueSurfaceEncountered,
  float16_t coneRadius = 0, float16_t spreadAngle = 0, float16_t tMaxFactor = 1.0h,
  // ViewModel instances shouldn't occlude anything but ViewModel surfaces and primary rays
  bool hasRayOriginatedFromViewModel = false,
  bool usePreviousTLAS = false,
  uint16_t primarySurfaceIndex = BINDING_INDEX_INVALID, float2 texCoords = f16vec2(0.0h),
  bool isThinOpaqueSubsurface = false,
  f16vec3 shadingNormal = f16vec3(0.0h), bool clearOpaqueHitAttenuation = true)
{
  MinimalRayInteraction minimalRayInteraction = (MinimalRayInteraction) 0;
  minimalRayInteraction.coneRadius = coneRadius;
  
  Ray viewRay = (Ray) 0;
  viewRay.spreadAngle = spreadAngle;

  Ray visibilityRay;
  if (!isThinOpaqueSubsurface)
  {
    visibilityRay = rayCreatePosition( minimalRayInteraction, minimalSurfaceInteraction, viewRay, targetPosition, false);
  }
  else
  {
    visibilityRay = rayCreatePositionSubsurface(
      minimalRayInteraction, minimalSurfaceInteraction, viewRay, targetPosition, shadingNormal);
  }

  visibilityRay.tMax *= tMaxFactor;

#ifdef OPAQUE_MATERIAL_USE_POM

  // Evaluate POM visibility
  float pomAttenuation = 1.0f;
  if ((VisibilityMode & visibilityModeEnablePom) && cb.pomMode != DisplacementMode::Off && pomOpaqueSurfaceEncountered)
  {
    if (cb.debugView == DEBUG_VIEW_HEIGHT_MAP)
    {
      if (primarySurfaceIndex != BINDING_INDEX_INVALID)
      {
        const MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial = surfaceMaterials[primarySurfaceIndex];
        if (memoryPolymorphicSurfaceMaterial.isOpaque())
        {
          OpaqueSurfaceMaterial opaqueSurfaceMaterial = opaqueSurfaceMaterialCreate(memoryPolymorphicSurfaceMaterial, true);
          
          if (!opaqueSurfaceMaterial.hasValidDisplacement())
          {
            storeInDebugView(getDispatchRaysIndex().xy, float3(0.0f, 1.f, 1.f));
          }
          else if (opaqueSurfaceMaterial.heightTextureIndex == BINDING_INDEX_INVALID)
          {
            storeInDebugView(getDispatchRaysIndex().xy, float3(0.0f, 1.f, 0.66f));
          }
        }
        else
        {
          storeInDebugView(getDispatchRaysIndex().xy, float3(0.f, 1.f, 0.33f));
        }
      }
      else
      {
        storeInDebugView(getDispatchRaysIndex().xy, float3(0.f, 1.f, 0.f));
      }
    }

    if (primarySurfaceIndex != BINDING_INDEX_INVALID)
    {
      const MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial = surfaceMaterials[primarySurfaceIndex];
      if (memoryPolymorphicSurfaceMaterial.hasValidDisplacement())
      {
        OpaqueSurfaceMaterial opaqueSurfaceMaterial = opaqueSurfaceMaterialCreate(memoryPolymorphicSurfaceMaterial, true);
        
        pomAttenuation = opaqueSurfaceMaterialInteractionCalcHeightThroughput(
          minimalSurfaceInteraction, visibilityRay.direction, opaqueSurfaceMaterial, texCoords
        );
    
        if (pomAttenuation <= 0.001f)
        {
          VisibilityResult result;
          result.attenuation = pomAttenuation;
          result.hasOpaqueHit = true;
          result.rayDirection = visibilityRay.direction;
          result.hitDistance = visibilityRay.tMax; // TODO should refactor POM code to return?
          result.hasPOMHit = true;
          return result;
        }
      }
    }
  }
#endif

  VisibilityResult result = traceVisibilityRay<VisibilityMode>(visibilityRay, rayMask, expectedRayPortalIndex, rayOriginPortalSpace, hasRayOriginatedFromViewModel, usePreviousTLAS, clearOpaqueHitAttenuation);

  // We want to calculate the attenuation from the light to the surface - which is why we use targetPosition (light) and neg-direction (light to surface)
  result.attenuation *= calcAtmosphereAttenuation(cb.volumeArgs, false, result.hitDistance, targetPosition, -visibilityRay.direction);

#ifdef OPAQUE_MATERIAL_USE_POM
  result.attenuation = result.attenuation * pomAttenuation;
#endif

  return result;
}
