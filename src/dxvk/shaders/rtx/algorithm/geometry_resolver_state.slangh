/*
* Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/pass/nrc/nrc_integrator_utilities.slangh"
#include "rtx/concept/ray_portal/ray_portal.slangh"
#include "rtx/utility/packing.slangh"

struct GeometryResolverState : IBasePayloadState
{
  // Note: These ray properties are passed into the function with the state of the
  // ray being cast as an input, and then set to the new state of the sampled ray
  // (if applicable) as an output.
  vec3 _origin;
  float16_t _coneRadius;
  uint16_t _encodedFlags;

  // Note: Radiance, throughput and hit distances are passed in and then written back out
  // so they can be accumulated into in the geometry resolving loop.
  vec3 radiance;
  float _segmentHitDistance;

  // Note: This represents the quaternion to transform a normal or vector from world space into the virtual space seen
  // through PSR and ray portals.
  f16vec4 _accumulatedRotation;
  float accumulatedHitDistance;
  
  f16vec3 _direction;
  f16vec3 attenuation;
  uint8_t _rayMask;

  // Property to get and set pixel coordinate
  property u16vec2 pixelCoordinate 
  {
    get 
    {
      return getDispatchRaysIndex().xy;
    }
  }

  // Passthrough accessors

  property vec3 origin 
  {
    get { return _origin; }
    set { _origin = newValue; }
  }

  property float16_t coneRadius 
  {
    get { return _coneRadius; }
    set { _coneRadius = newValue; }
  }

  property float segmentHitDistance 
  {
    get { return _segmentHitDistance; }
    set { _segmentHitDistance = newValue; }
  }

  property f16vec3 direction 
  {
    get { return _direction; }
    set { _direction = newValue; }
  }

  property uint8_t rayMask 
  {
    get { return _rayMask; }
    set { _rayMask = newValue; }
  }

  // Flags

  // Note: Needed output for Resolve function. Indicates that more resolve work needs to happen
  // and hits should not be counted until finished. Could be omitted from input memory payload
  // if extra flag space is needed, but kept there for now for simplicity.
  property bool continueResolving
  {
      get { return packedFlagGet(_encodedFlags, 1 << 0); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 0, newValue); }
  }

  // Note: Used to indicate the state of the inside medium flag for the PSTR event (if any). This is needed because
  // PSTR can still trigger on thin translucent surfaces which will not put the ray into a medium, whereas for
  // standard translucent surfaces it will.
  property bool insideMedium
  {
      get { return packedFlagGet(_encodedFlags, 1 << 1); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 1, newValue); }
  }

  // Note: Flags to indicate if Primary Surface Reflection/Transmission Replacement should be done
  // afterwards. These flags imply that the direction member (and secondary direction member when
  // both types are desired at once) will be populated with the sampled reflected/transmission direction,
  // as well as a secondary throughput in addition to the usual throughput, and finally information to derive
  // vector transformations later on.
  property bool performPSRR
  {
      get { return packedFlagGet(_encodedFlags, 1 << 2); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 2, newValue); }
  }

  property bool performPSTR
  {
      get { return packedFlagGet(_encodedFlags, 1 << 3); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 3, newValue); }
  }

  // Note: Indicates if the reflection (true) or transmission (false) PSR surface should be the surface used for integration.
  property bool reflectionSelectedIntegrationSurface
  {
      get { return packedFlagGet(_encodedFlags, 1 << 4); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 4, newValue); }
  }

  // Note: Indicates that the final resolved surface belongs to a view model
  property bool isViewModelSurface
  {
      get { return packedFlagGet(_encodedFlags, 1 << 5); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 5, newValue); }
  }

  property bool decalEncountered
  {
      get { return packedFlagGet(_encodedFlags, 1 << 6); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 6, newValue); }
  }

  property bool useAlternateDisocclusionThreshold
  {
      get { return packedFlagGet(_encodedFlags, 1 << 7); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 7, newValue); }
  }

  property bool directionAltered
  {
      get { return packedFlagGet(_encodedFlags, 1 << 8); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 8, newValue); }
  }

  property bool pomOpaqueSurfaceEncountered
  {
      get { return packedFlagGet(_encodedFlags, 1 << 9); }
      set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 9, newValue); }
  }

  // Misc packed properties

  // Note: Indicates portal space in which the surface was hit
  property PortalSpace2BitsType portalSpace
  {
      get { return (PortalSpace2BitsType)((_encodedFlags >> 14) & 0b11); }
      set { _encodedFlags = (_encodedFlags & ~(0b11 << 14)) | ((uint)newValue << 14); }
  }

  property f16vec4 accumulatedRotation
  {
      get { return _accumulatedRotation; }
      set { _accumulatedRotation = newValue; }
  }

#ifdef RAY_PIPELINE
  bool shouldReorder(out uint coherenceHints, out uint numCoherenceHints)
  {
    coherenceHints = 0;
    numCoherenceHints = 0;

    return false;
  }
#endif // defined(RAY_PIPELINE)
}

struct GeometryPSRResolverState : IBasePayloadState
{
  // Note: These ray properties are passed into the function with the state of the
  // ray being cast as an input, and then set to the new state of the sampled ray
  // (if applicable) as an output.
  vec3 _origin;
  float16_t _coneRadius;
  uint16_t _encodedFlags;

  // Note: Radiance, throughput and hit distances are passed in and then written back out
  // so they can be accumulated into in the geometry PSR resolving loop.
  vec3 radiance;
  float _segmentHitDistance;
  
  f16vec4 _accumulatedRotation;
  float accumulatedHitDistance;
  uint16_t mediumMaterialIndex;
  uint8_t _rayMask;
  uint8_t bounceIteration;
  
  f16vec3 _direction;
  f16vec3 attenuation;

  // Property to get and set pixel coordinate
  property u16vec2 pixelCoordinate 
  {
    get 
    {
      return getDispatchRaysIndex().xy;
    }
  }

  // Passthrough accessors

  property vec3 origin 
  {
    get { return _origin; }
    set { _origin = newValue; }
  }

  property float16_t coneRadius 
  {
    get { return _coneRadius; }
    set { _coneRadius = newValue; }
  }

  property float segmentHitDistance 
  {
    get { return _segmentHitDistance; }
    set { _segmentHitDistance = newValue; }
  }

  property f16vec3 direction 
  {
    get { return _direction; }
    set { _direction = newValue; }
  }

  property uint8_t rayMask 
  {
    get { return _rayMask; }
    set { _rayMask = newValue; }
  }

  // Flags

  // Note: Needed output for Resolve function. Indicates that more resolve work needs to happen
  // and hits should not be counted until finished. Could be omitted from input memory payload
  // if extra flag space is needed, but kept there for now for simplicity.
  property bool continueResolving 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 0); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 0, newValue); }
  }

  // Note: Used to keep track of if a ray is inside a translucent medium or not, used as both an
  // input and an output to keep a persistent state across calls.
  property bool insideMedium 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 1); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 1, newValue); }
  }

  // Note: Indicates if this invocation is dealing with what is to be considered a "primary" surface, versus a secondary
  // one, and thus should output to the primary set of buffers.
  property bool primarySurface 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 2); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 2, newValue); }
  }

  // Note: A flag which indicates if this invocation of the PSR resolver was chosen to be the surface integration
  // is done on. This means this invocation should write its data out to the stochastic buffers when applicable.
  property bool selectedIntegrationSurface 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 3); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 3, newValue); }
  }

  property bool isViewModelSurface 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 4); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 4, newValue); }
  }

  property bool isTransmissionPSR 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 5); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 5, newValue); }
  }

  property bool decalEncountered 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 6); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 6, newValue); }
  }

  property bool useAlternateDisocclusionThreshold 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 7); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 7, newValue); }
  }

  property bool isRefractionDistorted 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 8); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 8, newValue); }
  }

  // Note: Used as an input and output to indicate when the PSR resolving should finish. Set to true either
  // when the max bounce count is hit or when a final hit is found.
  property bool continuePSRResolving 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 9); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 9, newValue); }
  }

  property bool pomOpaqueSurfaceEncountered 
  {
    get { return packedFlagGet(_encodedFlags, 1 << 10); }
    set { _encodedFlags = packedFlagAssign(_encodedFlags, 1 << 10, newValue); }
  }

  property bool directionAltered
  {
      get { return false; }
      set { }
  }

  // Misc packed properties

  // Note: Indicates portal space in which the surface was hit
  property PortalSpace2BitsType portalSpace 
  {
    get { return (PortalSpace2BitsType)((_encodedFlags >> 14) & 0b11); }
    set { _encodedFlags = (_encodedFlags & ~(0b11 << 14)) | ((uint)newValue << 14); }
  }

  // Note: This represents the quaternion to transform a normal or vector from world space into the virtual space seen
  // through PSR and ray portals.
  property f16vec4 accumulatedRotation
  {
      get { return _accumulatedRotation; }
      set { _accumulatedRotation = newValue; }
  }

#ifdef RAY_PIPELINE
  bool shouldReorder(out uint coherenceHints, out uint numCoherenceHints) 
  {
    coherenceHints = 0;
    numCoherenceHints = 0;
    return false;
  }
#endif // defined(RAY_PIPELINE)
};

// Data that is passed from the primary rays pass into the Reflection and Transmission PSR passes
// Note: this doesn't include the coneRadius and accumulatedHitDistance fields that are passed separately, see geometryResolverVertex(...)
struct GbufferPSRData
{
  uint3 origin;
  uint encodedDirection;

  uint2 encodedAccumulatedRotation;
  uint attenuation;
  uint mediumMaterialIndexAndGeometryFlags;
};

// Encodes various PSR data into storage formats
GbufferPSRData packPSRData(Ray sampledRay, uint16_t mediumMaterialIndex, f16vec3 attenuation,
  f16vec4 accumulatedRotation, uint packedGeometryFlags)
{
  GbufferPSRData psrData = (GbufferPSRData)0;
  psrData.origin = floatBitsToUint(sampledRay.origin);
  psrData.encodedDirection = sphereDirectionToSnorm2x16(sampledRay.direction);
  psrData.mediumMaterialIndexAndGeometryFlags = mediumMaterialIndex | (packedGeometryFlags << 16);
  psrData.attenuation = colorToR11G11B10(attenuation);
  psrData.encodedAccumulatedRotation = packFloat4x16(accumulatedRotation);
  return psrData;
}

// Decodes the PSR data from storage formats
void unpackPSRData(GbufferPSRData psrData, inout GeometryPSRResolverState geometryPSRResolverState)
{
  geometryPSRResolverState.origin = uintBitsToFloat(psrData.origin);
  geometryPSRResolverState.direction = snorm2x16ToSphereDirection(psrData.encodedDirection);
  geometryPSRResolverState.attenuation = r11g11b10ToColor(psrData.attenuation);
  geometryPSRResolverState.accumulatedRotation = unpackFloat4x16(psrData.encodedAccumulatedRotation);
  geometryPSRResolverState.mediumMaterialIndex = psrData.mediumMaterialIndexAndGeometryFlags & 0xffff;
  geometryPSRResolverState.insideMedium = geometryPSRResolverState.mediumMaterialIndex != BINDING_INDEX_INVALID;

  GeometryFlags geometryFlags = geometryFlagsDecode(psrData.mediumMaterialIndexAndGeometryFlags >> 16);
  geometryPSRResolverState.rayMask = geometryFlags.objectMask | OBJECT_MASK_ALL;
  geometryPSRResolverState.portalSpace = geometryFlags.portalSpace;
}

void storeReflectionPSRData(GbufferPSRData psrData, uint2 pixelCoordinate)
{
  aliasedData0.ReflectionPSRData0[pixelCoordinate] = asfloat(uint4(psrData.origin.xyz, psrData.encodedDirection));
  ReflectionPSRData1[pixelCoordinate] = psrData.encodedAccumulatedRotation;
  ReflectionPSRData2[pixelCoordinate] = uint2(psrData.attenuation, psrData.mediumMaterialIndexAndGeometryFlags);
}

GbufferPSRData loadReflectionPSRData(uint2 pixelCoordinate)
{
  uint4 data0 = asuint(aliasedData0.ReflectionPSRData0[pixelCoordinate]);
  uint2 data1 = ReflectionPSRData1[pixelCoordinate];
  uint2 data2 = ReflectionPSRData2[pixelCoordinate];

  // Clear the PSR data to prevent storing NaNs in these aliased resources
  aliasedData0.ReflectionPSRData0[pixelCoordinate] = 0;
  ReflectionPSRData1[pixelCoordinate] = 0;
  ReflectionPSRData2[pixelCoordinate] = 0;

  GbufferPSRData psrData;
  psrData.origin.xyz = data0.xyz;
  psrData.encodedDirection = data0.w;
  psrData.encodedAccumulatedRotation = data1;
  psrData.attenuation = data2.x;
  psrData.mediumMaterialIndexAndGeometryFlags = data2.y;
  return psrData;
}

void storeTransmissionPSRData(GbufferPSRData psrData, uint2 pixelCoordinate)
{
  // Note: these resources are aliased with various radiance textures, which are only used
  // in the integrator. So it is safe to use them to pass data from the primary rays pass
  // into the transmission PSR pass, which comes second.
  TransmissionPSRData0[pixelCoordinate] = uint2(psrData.origin.xy);
  TransmissionPSRData1[pixelCoordinate] = uint2(psrData.origin.z, psrData.encodedDirection);
  TransmissionPSRData2[pixelCoordinate] = psrData.encodedAccumulatedRotation;
  TransmissionPSRData3[pixelCoordinate] = uint2(psrData.attenuation, psrData.mediumMaterialIndexAndGeometryFlags);
}

GbufferPSRData loadTransmissionPSRData(uint2 pixelCoordinate)
{
  uint2 data0 = TransmissionPSRData0[pixelCoordinate];
  uint2 data1 = TransmissionPSRData1[pixelCoordinate];
  uint2 data2 = TransmissionPSRData2[pixelCoordinate];
  uint2 data3 = TransmissionPSRData3[pixelCoordinate];

  // Clear the PSR data to prevent storing NaNs in these aliased resources
  TransmissionPSRData0[pixelCoordinate] = 0;
  TransmissionPSRData1[pixelCoordinate] = 0;
  TransmissionPSRData2[pixelCoordinate] = 0;
  TransmissionPSRData3[pixelCoordinate] = 0;

  GbufferPSRData psrData;
  psrData.origin.xy = data0.xy;
  psrData.origin.z = data1.x;
  psrData.encodedDirection = data1.y;
  psrData.encodedAccumulatedRotation = data2;
  psrData.attenuation = data3.x;
  psrData.mediumMaterialIndexAndGeometryFlags = data3.y;
  return psrData;
}
