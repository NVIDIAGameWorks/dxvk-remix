/*
* Copyright (c) 2021-2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Note: These common bindings are to only be included in passes, do not include
// this file in any helpers (glsli files). Additionally only h files for the
// concepts are included to avoid dependencies on bindings within these includes.

#include "rtx/pass/common_binding_indices.h"

#include "rtx/pass/raytrace_args.h"
#include "rtx/concept/surface/surface.h"
#include "rtx/concept/surface_material/surface_material.h"
#include "rtx/concept/volume/volume.h"
#include "rtx/concept/volume_material/volume_material.h"
#include "rtx/concept/light/light.h"
#include "rtx/concept/billboard.h"
#include "rtx/utility/gpu_printing.h"

// Note: Texture array may only be up to a size of 2^16
layout(set = BINDING_SET_BINDLESS_TEXTURE2D, binding = 0)
Texture2D textures[];

[allow("parameterBindingsOverlap")]
layout(set = BINDING_SET_BINDLESS_RAW_BUFFER, binding = 0) 
StructuredBuffer<float> geometries[];

[allow("parameterBindingsOverlap")]
layout(set = BINDING_SET_BINDLESS_RAW_BUFFER, binding = 0)
StructuredBuffer<uint16_t> indices[];

[allow("parameterBindingsOverlap")]
layout(set = BINDING_SET_BINDLESS_RAW_BUFFER, binding = 0)
StructuredBuffer<uint32_t> indices32[];

layout(set = BINDING_SET_BINDLESS_SAMPLER, binding = 0)
SamplerState samplers[];

layout(binding = BINDING_ACCELERATION_STRUCTURE)
RaytracingAccelerationStructure topLevelAS;

layout(binding = BINDING_ACCELERATION_STRUCTURE_PREVIOUS)
RaytracingAccelerationStructure previousTopLevelAS;

layout(binding = BINDING_ACCELERATION_STRUCTURE_UNORDERED)
RaytracingAccelerationStructure unorderedTLAS;

layout(binding = BINDING_SURFACE_DATA_BUFFER) 
StructuredBuffer<Surface> surfaces;

layout(binding = BINDING_SURFACE_MAPPING_BUFFER) 
StructuredBuffer<int32_t> surfaceMapping;

// Note: Surface Material array may only be up to a size of 2^16
layout(binding = BINDING_SURFACE_MATERIAL_DATA_BUFFER)
StructuredBuffer<MemoryPolymorphicSurfaceMaterial> surfaceMaterials;

// Note: Surface Material array may only be up to a size of 2^16
layout(binding = BINDING_SURFACE_MATERIAL_EXT_DATA_BUFFER)
StructuredBuffer<MemoryPolymorphicSurfaceMaterial> surfaceMaterialExtensions;

// Todo: Volumes for consistency with surfaces and for multi-volume support in the future

// Note: Volume Material array may only be up to a size of 2^16
layout(binding = BINDING_VOLUME_MATERIAL_DATA_BUFFER)
StructuredBuffer<MemoryVolumeMaterial> volumeMaterials;

// Note: Light array may only be up to a size of 2^16
layout(binding = BINDING_LIGHT_DATA_BUFFER) 
StructuredBuffer<MemoryPolymorphicLight> lights;

layout(binding = BINDING_PREVIOUS_LIGHT_DATA_BUFFER) 
StructuredBuffer<MemoryPolymorphicLight> previousLights;

layout(binding = BINDING_LIGHT_MAPPING)
StructuredBuffer<uint16_t> lightMapping;

layout(binding = BINDING_BILLBOARDS_BUFFER) 
StructuredBuffer<MemoryBillboard> billboards;

layout(binding = BINDING_BLUE_NOISE_TEXTURE)
Texture2DArray BlueNoise;

layout(binding = BINDING_CONSTANTS)
ConstantBuffer<RaytraceArgs> cb;

layout(binding = BINDING_DEBUG_VIEW_TEXTURE)
RWTexture2D DebugView;

layout(binding = BINDING_GPU_PRINT_BUFFER) 
RWStructuredBuffer<GpuPrintBufferElement> GpuPrintBuffer;

layout(binding = BINDING_VALUE_NOISE_SAMPLER)
Sampler2D<float4> ValueNoiseSampler;

layout(binding = BINDING_SAMPLER_READBACK_BUFFER) 
RWStructuredBuffer<uint32_t> SamplerFeedbackBuffer;
