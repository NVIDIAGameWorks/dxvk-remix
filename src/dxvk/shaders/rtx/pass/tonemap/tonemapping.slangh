/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/pass/tonemap/tonemapping.h"
#include "rtx/utility/color.slangh"

#include "ACES.hlsl"

static const uint kHistogramFixedPointScale = 0x100;

float getExposure(RWTexture1D<float> ExposureTex, const bool enableAutoExposure, const float exposureFactor)
{
  float exposure = exposureFactor;
  if (enableAutoExposure)
  {
    exposure *= ExposureTex[0].r;
  }
  return exposure;
}

float normalizedEVToHistogramOffset(float normalizedEV)
{
  // Remap exposure to bucket (1, size-1)
  return (saturate(normalizedEV) * float(EXPOSURE_HISTOGRAM_SIZE - 2)) + 1;
}

float histogramOffsetToNormalizedEV(float offset)
{
  return saturate((offset - 1) / float(EXPOSURE_HISTOGRAM_SIZE - 2));
}

// Approximation of ACES
// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
float3 ACESFilmApproximation(float3 x)
{
  float a = 2.51f;
  float b = 0.03f;
  float c = 2.43f;
  float d = 0.59f;
  float e = 0.14f;
  return saturate((x*(a*x+b))/(x*(c*x+d)+e));
}

float3 ACESFilm(float3 color, bool useLegacyACES, bool suppressBlackLevelClamp = false)
{
  if (useLegacyACES)
  {
    return ACESFilmApproximation(color);
  }
  return ACESFitted(color, suppressBlackLevelClamp);
}
