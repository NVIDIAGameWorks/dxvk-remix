/*
* Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/utility/common.slangh"
#include "rtx/utility/noise.slangh"
#include "rtx/utility/math.slangh"
#include "rtx/utility/gbuffer_helpers.slangh"
#include "rtx/concept/ray/ray.slangh"
#include "rtx/concept/surface/surface.slangh"
#include "rtx/concept/surface_material/surface_material.slangh"
#include "rtx/algorithm/integrator_indirect.slangh"

// Returns true if this is an active pixel
// Returns false if the thread should terminate
bool initPixelOnLaunch(inout uvec2 gbufferPixelCoordinate, out bool isNrcUpdate)
{
  isNrcUpdate = false;  

#if ENABLE_NRC
  // Identify which NRC mode this thread index corresponds to
  const uvec2 combinedNrcCoordinate = gbufferPixelCoordinate;   
  isNrcUpdate = Nrc::isUpdatePixel(combinedNrcCoordinate, cb);
    
  if (isNrcUpdate)
  {
    const uvec2 nrcUpdatePixelCoordinate = Nrc::calculateUpdatePixelCoordinateFromCombinedCoordinate(combinedNrcCoordinate, cb);

    if (any(nrcUpdatePixelCoordinate >= cb.nrcArgs.activeTrainingDimensions))
    {
      return false;
    }

    gbufferPixelCoordinate = Nrc::calculateTrainingPixelCoordinateInQuerySpace(nrcUpdatePixelCoordinate, cb.nrcArgs);
  }
  else
  {
    gbufferPixelCoordinate.y -= cb.nrcArgs.numRowsForUpdate;
  }
#else
  // Mark as unused since the parameter is not being written to
  unused(gbufferPixelCoordinate);
#endif

  if (any(gbufferPixelCoordinate >= cb.camera.resolution))
  {
    return false;
  }

  return true;
}

void integrate_indirect_pass(ivec2 threadIndex)
{
  uvec2 gbufferPixelCoordinate = threadIndex;

  bool isNrcUpdate = false;

  if (!initPixelOnLaunch(gbufferPixelCoordinate, isNrcUpdate))
  {
    return;
  }

  // Deserialize flags

  const GeometryFlags geometryFlags = geometryFlagsReadFromGBuffer(gbufferPixelCoordinate, SharedFlags);

  // Check if the GBuffer was hit on the Primary and Secondary surfaces

  const bool primaryGBufferMiss = isGBufferMiss(gbufferPixelCoordinate, PrimaryConeRadius);
  const bool secondaryGBufferMiss = isGBufferMiss(gbufferPixelCoordinate, SecondaryConeRadius);

  // Write out empty data
  // Note: This should hopefully prevent any weird undefined data from bleeding into pixels actually being denoised, but
  // may not be needed depending on how the denoiser works.

  bool gbufferMissOfASelectedIntegrationSurface = 
    geometryFlags.primarySelectedIntegrationSurface
    ? primaryGBufferMiss 
    : secondaryGBufferMiss;

  // Note: Early out if no more work on the active surface is needed.
  if (gbufferMissOfASelectedIntegrationSurface)
  {
    if (isNrcUpdate)
    {
      // IndirectRadianceHitDistance is not used for update pixels, so no need to write it out
      return;
    }

    IndirectRadianceHitDistance[gbufferPixelCoordinate] = vec4(vec3(0), kEmptyPixelHitDistance);

    return;
  }

  // Read the medium material index

  const uint16_t mediumMaterialIndex = SharedMediumMaterialIndex[gbufferPixelCoordinate];

  // Load state data carried over from the direct integration pass

  const vec4 rayOriginDirection = RayOriginDirection[gbufferPixelCoordinate];
  const vec4 throughputConeRadius = ThroughputConeRadius[gbufferPixelCoordinate];
  IndirectSampleData indirectSampleData;
  indirectSampleData.load(gbufferPixelCoordinate, FirstSampledLobeData);

  const vec3 rayOrigin = rayOriginDirection.xyz;
  const f16vec3 rayDirection = signedOctahedralToSphereDirection(snorm2x16ToFloat2x32(floatBitsToUint(rayOriginDirection.w)));
  const f16vec3 throughput = throughputConeRadius.xyz;
  const float16_t coneRadius = throughputConeRadius.w;
  const float16_t firstHitPerceptualRoughness = FirstHitPerceptualRoughness[gbufferPixelCoordinate];
  const float16_t firstSampledLobePdf = indirectSampleData.firstSampledLobePdf;
  const float16_t firstSampledSolidAnglePdf = indirectSampleData.firstSampledSolidAnglePdf;

  float gbufferSurfaceHitDistance = 0;
  if (geometryFlags.primarySelectedIntegrationSurface)
  {
    gbufferSurfaceHitDistance = PrimaryHitDistance[gbufferPixelCoordinate];
  }
  else
  {
    gbufferSurfaceHitDistance = SecondaryHitDistance[gbufferPixelCoordinate];
  }

  // Integrate the Indirect portion of the Path

  IndirectPathTextures indirectPathTextures;

  indirectPathTextures.PrimaryWorldPositionWorldTriangleNormal = PrimaryWorldPositionWorldTriangleNormal;
  indirectPathTextures.IndirectRadianceHitDistance = IndirectRadianceHitDistance;// aliasedData0.IndirectRadianceHitDistance;
  
  integrateIndirectPath(
    gbufferPixelCoordinate, INTEGRATE_INDIRECT_SBT_OFFSET_STANDARD, indirectPathTextures,
    geometryFlags, mediumMaterialIndex, rayOrigin, rayDirection,
    throughput, coneRadius, firstHitPerceptualRoughness,
    firstSampledLobePdf, firstSampledSolidAnglePdf, gbufferSurfaceHitDistance, isNrcUpdate);
}
