{
  "lightspeed.trex.components.InterpolateFloat": {
    "description": ["Interpolates a value from an input range to an output range with optional easing. \nCombines normalization (reverse LERP), easing, and mapping (LERP) into a single component. \n\nNote input values outside of input range are valid, and that easing can lead to the output value being outside of the output range even when input is inside the input range.\n Inverted ranges (max < min) are supported, but the results are undefined and may change without warning."],
    "version": 1,
    "uiName": "Interpolate Float",
    "language": "python",
    "categoryDefinitions": "config/CategoryDefinition.json",
    "categories": "Logic",
    "inputs": {
      "value": {
        "description": ["The input value to interpolate."],
        "type": "float",
        "default": 0.000000,
        "uiName": "Value"
      },
      "inputMin": {
        "description": ["If `Value` equals `Input Min`, the output will be `Output Min`."],
        "type": "float",
        "default": 0.000000,
        "uiName": "Input Min"
      },
      "inputMax": {
        "description": ["If `Value` equals `Input Max`, the output will be `Output Max`."],
        "type": "float",
        "default": 1.000000,
        "uiName": "Input Max"
      },
      "clampInput": {
        "description": ["If true, `value` will be clamped to the input range."],
        "type": "bool",
        "default": false,
        "optional": true,
        "uiName": "Clamp Input"
      },
      "easingType": {
        "description": ["The type of easing to apply.\nAllowed values:  - Bounce: Bouncy, playful motion.\n  - Cubic: The float will change in a cubic curve over time.\n  - EaseIn: The float will start slow, then accelerate.\n  - EaseInOut: The float will start slow, accelerate, then decelerate.\n  - EaseOut: The float will start fast, then decelerate.\n  - Elastic: Spring-like motion.\n  - Exponential: Dramatic acceleration effect.\n  - Linear: The float will have a constant velocity.\n  - Sine: Smooth, natural motion using a sine wave.\n "],
        "type": "token",
        "default": "Linear",
        "metadata": {
          "allowedTokens": ["Bounce", "Cubic", "EaseIn", "EaseInOut", "EaseOut", "Elastic", "Exponential", "Linear", "Sine"]
        },
        "uiName": "Easing Type"
      },
      "shouldReverse": {
        "description": ["If true, the easing is applied backwards. If `Value` is coming from a loopFloat component that is using `pingpong`, hook this up to `isReversing` from that component."],
        "type": "bool",
        "default": false,
        "optional": true,
        "uiName": "Should Reverse"
      },
      "outputMin": {
        "description": ["What a `Value` of `Input Min` maps to."],
        "type": "float",
        "default": 0.000000,
        "uiName": "Output Min"
      },
      "outputMax": {
        "description": ["What a `Value` of `Input Max` maps to."],
        "type": "float",
        "default": 1.000000,
        "uiName": "Output Max"
      }
    },
    "outputs": {
      "interpolatedValue": {
        "description": ["The final interpolated value after applying input normalization, easing, and output mapping."],
        "type": "float",
        "default": 0.000000,
        "uiName": "Interpolated Value"
      }
    }
  }
}
